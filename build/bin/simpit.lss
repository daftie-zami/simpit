
build/bin/simpit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001944  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08001944  08001944  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08001944  08001944  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08001944  08001944  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000018  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000194  20000018  0800195c  00020018  2**2
                  ALLOC
  6 .comment      0000004d  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 0000002b  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY
  8 .debug_frame  00000d54  00000000  00000000  00020090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00007e37  00000000  00000000  00020de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a84  00000000  00000000  00028c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000035f4  00000000  00000000  0002a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000005e8  00000000  00000000  0002dc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000768  00000000  00000000  0002e27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004922  00000000  00000000  0002e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000513d  00000000  00000000  00033305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00013dce  00000000  00000000  00038442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 50 00 20 0d 11 00 08 09 11 00 08 07 11 00 08     .P. ............
 8000010:	07 11 00 08 07 11 00 08 07 11 00 08 00 00 00 00     ................
	...
 800002c:	09 11 00 08 09 11 00 08 00 00 00 00 09 11 00 08     ................
 800003c:	e9 03 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800004c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800005c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800006c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800007c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800008c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800009c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 80000ac:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 80000bc:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 80000cc:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 80000dc:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 80000ec:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 80000fc:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800010c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800011c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800012c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800013c:	07 11 00 08 07 11 00 08 07 11 00 08 07 11 00 08     ................
 800014c:	07 11 00 08                                         ....

08000150 <main>:
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
 8000154:	f000 f814 	bl	8000180 <clock_setup>
 8000158:	f000 f830 	bl	80001bc <led_init>
 800015c:	f000 f8b6 	bl	80002cc <hid_init>
 8000160:	f000 f90c 	bl	800037c <systick_init>
 8000164:	2032      	movs	r0, #50	; 0x32
 8000166:	f000 f927 	bl	80003b8 <delay>
 800016a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016e:	4803      	ldr	r0, [pc, #12]	; (800017c <main+0x2c>)
 8000170:	f000 f98a 	bl	8000488 <gpio_toggle>
 8000174:	2032      	movs	r0, #50	; 0x32
 8000176:	f000 f91f 	bl	80003b8 <delay>
 800017a:	e7f6      	b.n	800016a <main+0x1a>
 800017c:	40011000 	.word	0x40011000

08000180 <clock_setup>:
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
 8000184:	480c      	ldr	r0, [pc, #48]	; (80001b8 <clock_setup+0x38>)
 8000186:	f000 fa7d 	bl	8000684 <rcc_clock_setup_pll>
 800018a:	f240 3002 	movw	r0, #770	; 0x302
 800018e:	f000 fad7 	bl	8000740 <rcc_periph_clock_enable>
 8000192:	f240 3003 	movw	r0, #771	; 0x303
 8000196:	f000 fad3 	bl	8000740 <rcc_periph_clock_enable>
 800019a:	f44f 7041 	mov.w	r0, #772	; 0x304
 800019e:	f000 facf 	bl	8000740 <rcc_periph_clock_enable>
 80001a2:	f240 3096 	movw	r0, #918	; 0x396
 80001a6:	f000 facb 	bl	8000740 <rcc_periph_clock_enable>
 80001aa:	f44f 7040 	mov.w	r0, #768	; 0x300
 80001ae:	f000 fac7 	bl	8000740 <rcc_periph_clock_enable>
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	080018f4 	.word	0x080018f4

080001bc <led_init>:
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
 80001c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001c4:	2200      	movs	r2, #0
 80001c6:	2103      	movs	r1, #3
 80001c8:	4802      	ldr	r0, [pc, #8]	; (80001d4 <led_init+0x18>)
 80001ca:	f000 f929 	bl	8000420 <gpio_set_mode>
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40011000 	.word	0x40011000

080001d8 <hid_control_request>:
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
 80001e4:	603b      	str	r3, [r7, #0]
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b81      	cmp	r3, #129	; 0x81
 80001ec:	d109      	bne.n	8000202 <hid_control_request+0x2a>
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b06      	cmp	r3, #6
 80001f4:	d105      	bne.n	8000202 <hid_control_request+0x2a>
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	885b      	ldrh	r3, [r3, #2]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8000200:	d001      	beq.n	8000206 <hid_control_request+0x2e>
 8000202:	2300      	movs	r3, #0
 8000204:	e006      	b.n	8000214 <hid_control_request+0x3c>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <hid_control_request+0x48>)
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	2251      	movs	r2, #81	; 0x51
 8000210:	801a      	strh	r2, [r3, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	4618      	mov	r0, r3
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0800177c 	.word	0x0800177c

08000224 <dfu_detach_complete>:
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	2200      	movs	r2, #0
 8000234:	2102      	movs	r1, #2
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <dfu_detach_complete+0x28>)
 8000238:	f000 f8f2 	bl	8000420 <gpio_set_mode>
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <dfu_detach_complete+0x28>)
 8000242:	f000 f91c 	bl	800047e <gpio_set>
 8000246:	f000 ffc9 	bl	80011dc <scb_reset_core>
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800

08000250 <dfu_control_request>:
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
 800025c:	603b      	str	r3, [r7, #0]
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b21      	cmp	r3, #33	; 0x21
 8000264:	d103      	bne.n	800026e <dfu_control_request+0x1e>
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <dfu_control_request+0x22>
 800026e:	2300      	movs	r3, #0
 8000270:	e003      	b.n	800027a <dfu_control_request+0x2a>
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	4a03      	ldr	r2, [pc, #12]	; (8000284 <dfu_control_request+0x34>)
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	4618      	mov	r0, r3
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	08000225 	.word	0x08000225

08000288 <hid_set_config>:
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af02      	add	r7, sp, #8
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	807b      	strh	r3, [r7, #2]
 8000294:	2300      	movs	r3, #0
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2304      	movs	r3, #4
 800029a:	2203      	movs	r2, #3
 800029c:	2181      	movs	r1, #129	; 0x81
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 fa8a 	bl	80007b8 <usbd_ep_setup>
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <hid_set_config+0x3c>)
 80002a6:	227f      	movs	r2, #127	; 0x7f
 80002a8:	2101      	movs	r1, #1
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 fb72 	bl	8000994 <usbd_register_control_callback>
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <hid_set_config+0x40>)
 80002b2:	227f      	movs	r2, #127	; 0x7f
 80002b4:	2121      	movs	r1, #33	; 0x21
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 fb6c 	bl	8000994 <usbd_register_control_callback>
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	080001d9 	.word	0x080001d9
 80002c8:	08000251 	.word	0x08000251

080002cc <hid_init>:
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af04      	add	r7, sp, #16
 80002d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d6:	2200      	movs	r2, #0
 80002d8:	2102      	movs	r1, #2
 80002da:	481e      	ldr	r0, [pc, #120]	; (8000354 <hid_init+0x88>)
 80002dc:	f000 f8a0 	bl	8000420 <gpio_set_mode>
 80002e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e4:	481b      	ldr	r0, [pc, #108]	; (8000354 <hid_init+0x88>)
 80002e6:	f000 f8cc 	bl	8000482 <gpio_clear>
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	e003      	b.n	80002f8 <hid_init+0x2c>
 80002f0:	bf00      	nop
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3301      	adds	r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <hid_init+0x8c>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d9f7      	bls.n	80002f0 <hid_init+0x24>
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	9302      	str	r3, [sp, #8]
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <hid_init+0x90>)
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	2303      	movs	r3, #3
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <hid_init+0x94>)
 800030e:	4a15      	ldr	r2, [pc, #84]	; (8000364 <hid_init+0x98>)
 8000310:	4915      	ldr	r1, [pc, #84]	; (8000368 <hid_init+0x9c>)
 8000312:	4816      	ldr	r0, [pc, #88]	; (800036c <hid_init+0xa0>)
 8000314:	f000 fa22 	bl	800075c <usbd_init>
 8000318:	4603      	mov	r3, r0
 800031a:	4a15      	ldr	r2, [pc, #84]	; (8000370 <hid_init+0xa4>)
 800031c:	6013      	str	r3, [r2, #0]
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <hid_init+0xa4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4914      	ldr	r1, [pc, #80]	; (8000374 <hid_init+0xa8>)
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fe2e 	bl	8000f86 <usbd_register_set_config_callback>
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	e007      	b.n	8000340 <hid_init+0x74>
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <hid_init+0xa4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fa3b 	bl	80007b0 <usbd_poll>
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <hid_init+0xac>)
 8000344:	4293      	cmp	r3, r2
 8000346:	ddf3      	ble.n	8000330 <hid_init+0x64>
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010800 	.word	0x40010800
 8000358:	000c34ff 	.word	0x000c34ff
 800035c:	2000001c 	.word	0x2000001c
 8000360:	20000000 	.word	0x20000000
 8000364:	08001848 	.word	0x08001848
 8000368:	08001768 	.word	0x08001768
 800036c:	08001910 	.word	0x08001910
 8000370:	20000018 	.word	0x20000018
 8000374:	08000289 	.word	0x08000289
 8000378:	0016e35f 	.word	0x0016e35f

0800037c <systick_init>:
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
 8000380:	2000      	movs	r0, #0
 8000382:	f000 ff13 	bl	80011ac <systick_set_clocksource>
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <systick_init+0x34>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <systick_init+0x38>)
 800038c:	fba2 2303 	umull	r2, r3, r2, r3
 8000390:	0a5b      	lsrs	r3, r3, #9
 8000392:	3b01      	subs	r3, #1
 8000394:	4618      	mov	r0, r3
 8000396:	f000 ff03 	bl	80011a0 <systick_set_reload>
 800039a:	21ff      	movs	r1, #255	; 0xff
 800039c:	20ff      	movs	r0, #255	; 0xff
 800039e:	f000 ff25 	bl	80011ec <nvic_set_priority>
 80003a2:	f000 ff0d 	bl	80011c0 <systick_interrupt_enable>
 80003a6:	f000 ff12 	bl	80011ce <systick_counter_enable>
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	10624dd3 	.word	0x10624dd3

080003b8 <delay>:
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <delay+0x2c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	bf00      	nop
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <delay+0x2c>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d8f8      	bhi.n	80003c8 <delay+0x10>
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	2000009c 	.word	0x2000009c

080003e8 <sys_tick_handler>:
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <sys_tick_handler+0x18>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4a03      	ldr	r2, [pc, #12]	; (8000400 <sys_tick_handler+0x18>)
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	2000009c 	.word	0x2000009c

08000404 <memcpy>:
 8000404:	440a      	add	r2, r1
 8000406:	4291      	cmp	r1, r2
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040c:	d100      	bne.n	8000410 <memcpy+0xc>
 800040e:	4770      	bx	lr
 8000410:	b510      	push	{r4, lr}
 8000412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000416:	4291      	cmp	r1, r2
 8000418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800041c:	d1f9      	bne.n	8000412 <memcpy+0xe>
 800041e:	bd10      	pop	{r4, pc}

08000420 <gpio_set_mode>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8000420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);
 8000424:	2600      	movs	r6, #0

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8000426:	f04f 0e0f 	mov.w	lr, #15
{
 800042a:	469c      	mov	ip, r3
	crl = GPIO_CRL(gpioport);
 800042c:	6803      	ldr	r3, [r0, #0]
	crh = GPIO_CRH(gpioport);
 800042e:	6847      	ldr	r7, [r0, #4]
		if (!((1 << i) & gpios)) {
 8000430:	fa4c f406 	asr.w	r4, ip, r6
 8000434:	07e4      	lsls	r4, r4, #31
 8000436:	d51b      	bpl.n	8000470 <gpio_set_mode+0x50>
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8000438:	2e07      	cmp	r6, #7
 800043a:	bf94      	ite	ls
 800043c:	4698      	movls	r8, r3
 800043e:	46b8      	movhi	r8, r7
 8000440:	b2b4      	uxth	r4, r6
 8000442:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8000446:	bf8a      	itet	hi
 8000448:	3c20      	subhi	r4, #32
 800044a:	b2a4      	uxthls	r4, r4
		tmp32 = (i < 8) ? crl : crh;
 800044c:	b2a4      	uxthhi	r4, r4
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800044e:	fa0e f504 	lsl.w	r5, lr, r4
 8000452:	ea28 0805 	bic.w	r8, r8, r5
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8000456:	1ca5      	adds	r5, r4, #2
 8000458:	b2ad      	uxth	r5, r5
 800045a:	fa02 f505 	lsl.w	r5, r2, r5
 800045e:	fa01 f404 	lsl.w	r4, r1, r4
 8000462:	432c      	orrs	r4, r5
 8000464:	ea44 0408 	orr.w	r4, r4, r8

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 8000468:	2e07      	cmp	r6, #7
 800046a:	bf94      	ite	ls
 800046c:	4623      	movls	r3, r4
 800046e:	4627      	movhi	r7, r4
	for (i = 0; i < 16; i++) {
 8000470:	3601      	adds	r6, #1
 8000472:	2e10      	cmp	r6, #16
 8000474:	d1dc      	bne.n	8000430 <gpio_set_mode+0x10>
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8000476:	6003      	str	r3, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8000478:	6047      	str	r7, [r0, #4]
}
 800047a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800047e <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 800047e:	6101      	str	r1, [r0, #16]
}
 8000480:	4770      	bx	lr

08000482 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000482:	0409      	lsls	r1, r1, #16
 8000484:	6101      	str	r1, [r0, #16]
}
 8000486:	4770      	bx	lr

08000488 <gpio_toggle>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	uint32_t port = GPIO_ODR(gpioport);
 8000488:	68c3      	ldr	r3, [r0, #12]
	GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);
 800048a:	ea01 0203 	and.w	r2, r1, r3
 800048e:	ea21 0103 	bic.w	r1, r1, r3
 8000492:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000496:	6101      	str	r1, [r0, #16]
}
 8000498:	4770      	bx	lr
	...

0800049c <rcc_is_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

bool rcc_is_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 800049c:	2806      	cmp	r0, #6
 800049e:	d824      	bhi.n	80004ea <rcc_is_osc_ready+0x4e>
 80004a0:	e8df f000 	tbb	[pc, r0]
 80004a4:	130e0904 	.word	0x130e0904
 80004a8:	1d18      	.short	0x1d18
 80004aa:	20          	.byte	0x20
 80004ab:	00          	.byte	0x00
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004ae:	6818      	ldr	r0, [r3, #0]
 80004b0:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80004b4:	4770      	bx	lr
	case RCC_PLL2:
		return RCC_CR & RCC_CR_PLL2RDY;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80004be:	4770      	bx	lr
	case RCC_PLL3:
		return RCC_CR & RCC_CR_PLL3RDY;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	f3c0 7040 	ubfx	r0, r0, #29, #1
 80004c8:	4770      	bx	lr
	case RCC_HSE:
		return RCC_CR & RCC_CR_HSERDY;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004cc:	6818      	ldr	r0, [r3, #0]
 80004ce:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80004d2:	4770      	bx	lr
	case RCC_HSI:
		return RCC_CR & RCC_CR_HSIRDY;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004d6:	6818      	ldr	r0, [r3, #0]
	case RCC_LSE:
		return RCC_BDCR & RCC_BDCR_LSERDY;
 80004d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80004dc:	4770      	bx	lr
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004e0:	6a18      	ldr	r0, [r3, #32]
 80004e2:	e7f9      	b.n	80004d8 <rcc_is_osc_ready+0x3c>
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <rcc_is_osc_ready+0x54>)
 80004e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80004e8:	e7f6      	b.n	80004d8 <rcc_is_osc_ready+0x3c>
{
 80004ea:	2000      	movs	r0, #0
	}
	return false;
}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80004f4:	4602      	mov	r2, r0
 80004f6:	b508      	push	{r3, lr}
	while (!rcc_is_osc_ready(osc));
 80004f8:	4610      	mov	r0, r2
 80004fa:	f7ff ffcf 	bl	800049c <rcc_is_osc_ready>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d0fa      	beq.n	80004f8 <rcc_wait_for_osc_ready+0x4>
}
 8000502:	bd08      	pop	{r3, pc}

08000504 <rcc_osc_on>:
@param[in] osc Oscillator ID
*/

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000504:	2806      	cmp	r0, #6
 8000506:	d82a      	bhi.n	800055e <rcc_osc_on+0x5a>
 8000508:	e8df f000 	tbb	[pc, r0]
 800050c:	140f0a04 	.word	0x140f0a04
 8000510:	1e19      	.short	0x1e19
 8000512:	24          	.byte	0x24
 8000513:	00          	.byte	0x00
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <rcc_osc_on+0x5c>)
 8000516:	6813      	ldr	r3, [r2, #0]
 8000518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		break;
	case RCC_PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 800051c:	6013      	str	r3, [r2, #0]
		break;
 800051e:	4770      	bx	lr
		RCC_CR |= RCC_CR_PLL2ON;
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <rcc_osc_on+0x5c>)
 8000522:	6813      	ldr	r3, [r2, #0]
 8000524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000528:	e7f8      	b.n	800051c <rcc_osc_on+0x18>
	case RCC_PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <rcc_osc_on+0x5c>)
 800052c:	6813      	ldr	r3, [r2, #0]
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	e7f3      	b.n	800051c <rcc_osc_on+0x18>
		break;
	case RCC_HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <rcc_osc_on+0x5c>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800053c:	e7ee      	b.n	800051c <rcc_osc_on+0x18>
		break;
	case RCC_HSI:
		RCC_CR |= RCC_CR_HSION;
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <rcc_osc_on+0x5c>)
 8000540:	6813      	ldr	r3, [r2, #0]
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	e7e9      	b.n	800051c <rcc_osc_on+0x18>
		break;
	case RCC_LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <rcc_osc_on+0x5c>)
 800054a:	6a13      	ldr	r3, [r2, #32]
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6213      	str	r3, [r2, #32]
		break;
 8000552:	4770      	bx	lr
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000554:	4a02      	ldr	r2, [pc, #8]	; (8000560 <rcc_osc_on+0x5c>)
 8000556:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6253      	str	r3, [r2, #36]	; 0x24
		break;
	}
}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <rcc_set_sysclk_source>:
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <rcc_set_sysclk_source+0x10>)
 8000566:	6853      	ldr	r3, [r2, #4]
 8000568:	f023 0303 	bic.w	r3, r3, #3
 800056c:	4303      	orrs	r3, r0
 800056e:	6053      	str	r3, [r2, #4]
			(clk << RCC_CFGR_SW_SHIFT);
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <rcc_set_pll_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll_multiplication_factor(uint32_t mul)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <rcc_set_pll_multiplication_factor+0x10>)
 800057a:	6853      	ldr	r3, [r2, #4]
 800057c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000580:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8000584:	6053      	str	r3, [r2, #4]
			(mul << RCC_CFGR_PLLMUL_SHIFT);
}
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <rcc_set_pll2_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll2_multiplication_factor(uint32_t mul)
{
	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL2MUL) |
 800058c:	4a03      	ldr	r2, [pc, #12]	; (800059c <rcc_set_pll2_multiplication_factor+0x10>)
 800058e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000594:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000598:	62d3      	str	r3, [r2, #44]	; 0x2c
			(mul << RCC_CFGR2_PLL2MUL_SHIFT);
}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <rcc_set_pll3_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll3_multiplication_factor(uint32_t mul)
{
	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL3MUL) |
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <rcc_set_pll3_multiplication_factor+0x10>)
 80005a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80005a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80005a8:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
 80005ac:	62d3      	str	r3, [r2, #44]	; 0x2c
			(mul << RCC_CFGR2_PLL3MUL_SHIFT);
}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <rcc_set_pll_source>:
@param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
*/

void rcc_set_pll_source(uint32_t pllsrc)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 80005b4:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <rcc_set_pll_source+0x10>)
 80005b6:	6853      	ldr	r3, [r2, #4]
 80005b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80005c0:	6053      	str	r3, [r2, #4]
			(pllsrc << 16);
}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000

080005c8 <rcc_set_pllxtpre>:
@param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
*/

void rcc_set_pllxtpre(uint32_t pllxtpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <rcc_set_pllxtpre+0x10>)
 80005ca:	6853      	ldr	r3, [r2, #4]
 80005cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005d0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80005d4:	6053      	str	r3, [r2, #4]
			(pllxtpre << 17);
}
 80005d6:	4770      	bx	lr
 80005d8:	40021000 	.word	0x40021000

080005dc <rcc_set_adcpre>:
@param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
*/

void rcc_set_adcpre(uint32_t adcpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <rcc_set_adcpre+0x10>)
 80005de:	6853      	ldr	r3, [r2, #4]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80005e8:	6053      	str	r3, [r2, #4]
			(adcpre << RCC_CFGR_ADCPRE_SHIFT);
}
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000

080005f0 <rcc_set_ppre2>:
@param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
*/

void rcc_set_ppre2(uint32_t ppre2)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 80005f0:	4a03      	ldr	r2, [pc, #12]	; (8000600 <rcc_set_ppre2+0x10>)
 80005f2:	6853      	ldr	r3, [r2, #4]
 80005f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80005f8:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 80005fc:	6053      	str	r3, [r2, #4]
			(ppre2 << RCC_CFGR_PPRE2_SHIFT);
}
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000

08000604 <rcc_set_ppre1>:
@param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
*/

void rcc_set_ppre1(uint32_t ppre1)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <rcc_set_ppre1+0x10>)
 8000606:	6853      	ldr	r3, [r2, #4]
 8000608:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800060c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000610:	6053      	str	r3, [r2, #4]
			(ppre1 << RCC_CFGR_PPRE1_SHIFT);

}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <rcc_set_hpre>:
@param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
*/

void rcc_set_hpre(uint32_t hpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <rcc_set_hpre+0x10>)
 800061a:	6853      	ldr	r3, [r2, #4]
 800061c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000620:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8000624:	6053      	str	r3, [r2, #4]
			(hpre << RCC_CFGR_HPRE_SHIFT);

}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000

0800062c <rcc_set_usbpre>:
@param[in] usbpre Unsigned int32. USB prescale factor @ref rcc_cfgr_usbpre
*/

void rcc_set_usbpre(uint32_t usbpre)
{
	if (usbpre) {
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <rcc_set_usbpre+0x14>)
		RCC_CFGR |= RCC_CFGR_USBPRE;
 800062e:	685a      	ldr	r2, [r3, #4]
	if (usbpre) {
 8000630:	b118      	cbz	r0, 800063a <rcc_set_usbpre+0xe>
		RCC_CFGR |= RCC_CFGR_USBPRE;
 8000632:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
	} else {
		RCC_CFGR &= ~RCC_CFGR_USBPRE;
 8000636:	605a      	str	r2, [r3, #4]
	}
}
 8000638:	4770      	bx	lr
		RCC_CFGR &= ~RCC_CFGR_USBPRE;
 800063a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800063e:	e7fa      	b.n	8000636 <rcc_set_usbpre+0xa>
 8000640:	40021000 	.word	0x40021000

08000644 <rcc_set_prediv1>:

void rcc_set_prediv1(uint32_t prediv)
{
	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV1) |
 8000644:	4a03      	ldr	r2, [pc, #12]	; (8000654 <rcc_set_prediv1+0x10>)
 8000646:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000648:	f023 030f 	bic.w	r3, r3, #15
 800064c:	4303      	orrs	r3, r0
 800064e:	62d3      	str	r3, [r2, #44]	; 0x2c
			(prediv << RCC_CFGR2_PREDIV1_SHIFT);
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <rcc_set_prediv2>:

void rcc_set_prediv2(uint32_t prediv)
{
	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV2) |
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <rcc_set_prediv2+0x10>)
 800065a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800065c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000660:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8000664:	62d3      	str	r3, [r2, #44]	; 0x2c
			(prediv << RCC_CFGR2_PREDIV2_SHIFT);
}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000

0800066c <rcc_set_prediv1_source>:

void rcc_set_prediv1_source(uint32_t rccsrc)
{
	if (rccsrc) {
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <rcc_set_prediv1_source+0x14>)
		RCC_CFGR2 |= RCC_CFGR2_PREDIV1SRC;
 800066e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (rccsrc) {
 8000670:	b118      	cbz	r0, 800067a <rcc_set_prediv1_source+0xe>
		RCC_CFGR2 |= RCC_CFGR2_PREDIV1SRC;
 8000672:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
	} else {
		RCC_CFGR2 &= ~RCC_CFGR2_PREDIV1SRC;
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000678:	4770      	bx	lr
		RCC_CFGR2 &= ~RCC_CFGR2_PREDIV1SRC;
 800067a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800067e:	e7fa      	b.n	8000676 <rcc_set_prediv1_source+0xa>
 8000680:	40021000 	.word	0x40021000

08000684 <rcc_clock_setup_pll>:
	rcc_apb1_frequency = 36000000;
	rcc_apb2_frequency = 72000000;
}

void rcc_clock_setup_pll(const struct rcc_clock_scale *clock)
{
 8000684:	b510      	push	{r4, lr}
 8000686:	4604      	mov	r4, r0
	if (clock->pll_source == RCC_CFGR_PLLSRC_HSE_CLK) {
 8000688:	7843      	ldrb	r3, [r0, #1]
 800068a:	2b01      	cmp	r3, #1
		rcc_osc_on(RCC_HSE);
 800068c:	bf0c      	ite	eq
 800068e:	2003      	moveq	r0, #3
		rcc_wait_for_osc_ready(RCC_HSE);
	} else {
		rcc_osc_on(RCC_HSI);
 8000690:	2004      	movne	r0, #4
 8000692:	f7ff ff37 	bl	8000504 <rcc_osc_on>
		rcc_wait_for_osc_ready(RCC_HSI);
 8000696:	f7ff ff2d 	bl	80004f4 <rcc_wait_for_osc_ready>
	}
	rcc_set_hpre(clock->hpre);
 800069a:	78a0      	ldrb	r0, [r4, #2]
 800069c:	f7ff ffbc 	bl	8000618 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 80006a0:	78e0      	ldrb	r0, [r4, #3]
 80006a2:	f7ff ffaf 	bl	8000604 <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 80006a6:	7920      	ldrb	r0, [r4, #4]
 80006a8:	f7ff ffa2 	bl	80005f0 <rcc_set_ppre2>
	rcc_set_adcpre(clock->adcpre);
 80006ac:	7960      	ldrb	r0, [r4, #5]
 80006ae:	f7ff ff95 	bl	80005dc <rcc_set_adcpre>
	rcc_set_usbpre(clock->usbpre);
 80006b2:	7b20      	ldrb	r0, [r4, #12]
 80006b4:	f7ff ffba 	bl	800062c <rcc_set_usbpre>
	flash_set_ws(clock->flash_waitstates);
 80006b8:	79a0      	ldrb	r0, [r4, #6]
 80006ba:	f000 fda7 	bl	800120c <flash_set_ws>

	rcc_set_pll_multiplication_factor(clock->pll_mul);
 80006be:	7820      	ldrb	r0, [r4, #0]
 80006c0:	f7ff ff5a 	bl	8000578 <rcc_set_pll_multiplication_factor>
	rcc_set_pll_source(clock->pll_source);
 80006c4:	7860      	ldrb	r0, [r4, #1]
 80006c6:	f7ff ff75 	bl	80005b4 <rcc_set_pll_source>

	/*
	 * Magically handle F105/7 parts too.
	 * xtpre == prediv1 bit 0.
	 */
	if (clock->prediv1 > RCC_CFGR2_PREDIV_DIV2) {
 80006ca:	79e0      	ldrb	r0, [r4, #7]
 80006cc:	2801      	cmp	r0, #1
 80006ce:	d92d      	bls.n	800072c <rcc_clock_setup_pll+0xa8>
		rcc_set_prediv1(clock->prediv1);
 80006d0:	f7ff ffb8 	bl	8000644 <rcc_set_prediv1>
	} else {
		rcc_set_pllxtpre(clock->prediv1);
	}
	if (clock->prediv1_source) {
 80006d4:	7a20      	ldrb	r0, [r4, #8]
 80006d6:	b108      	cbz	r0, 80006dc <rcc_clock_setup_pll+0x58>
		rcc_set_prediv1_source(clock->prediv1_source);
 80006d8:	f7ff ffc8 	bl	800066c <rcc_set_prediv1_source>
	}

	/*
	 * Magically handle other plls/prescalers on other parts
	 */
	if (clock->prediv2) {
 80006dc:	7a60      	ldrb	r0, [r4, #9]
 80006de:	b108      	cbz	r0, 80006e4 <rcc_clock_setup_pll+0x60>
		rcc_set_prediv2(clock->prediv2);
 80006e0:	f7ff ffba 	bl	8000658 <rcc_set_prediv2>
	}
	if (clock->pll2_mul) {
 80006e4:	7aa0      	ldrb	r0, [r4, #10]
 80006e6:	b130      	cbz	r0, 80006f6 <rcc_clock_setup_pll+0x72>
		rcc_set_pll2_multiplication_factor(clock->pll2_mul);
 80006e8:	f7ff ff50 	bl	800058c <rcc_set_pll2_multiplication_factor>
		rcc_osc_on(RCC_PLL2);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff09 	bl	8000504 <rcc_osc_on>
		rcc_wait_for_osc_ready(RCC_PLL2);
 80006f2:	f7ff feff 	bl	80004f4 <rcc_wait_for_osc_ready>
	}
	if (clock->pll3_mul) {
 80006f6:	7ae0      	ldrb	r0, [r4, #11]
 80006f8:	b130      	cbz	r0, 8000708 <rcc_clock_setup_pll+0x84>
		rcc_set_pll3_multiplication_factor(clock->pll3_mul);
 80006fa:	f7ff ff51 	bl	80005a0 <rcc_set_pll3_multiplication_factor>
		rcc_osc_on(RCC_PLL3);
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff ff00 	bl	8000504 <rcc_osc_on>
		rcc_wait_for_osc_ready(RCC_PLL3);
 8000704:	f7ff fef6 	bl	80004f4 <rcc_wait_for_osc_ready>
	}

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(RCC_PLL);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fefb 	bl	8000504 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_PLL);
 800070e:	f7ff fef1 	bl	80004f4 <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff ff26 	bl	8000564 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used. */
	rcc_ahb_frequency  = clock->ahb_frequency;
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <rcc_clock_setup_pll+0xb0>)
 800071c:	601a      	str	r2, [r3, #0]
	rcc_apb1_frequency = clock->apb1_frequency;
 800071e:	6962      	ldr	r2, [r4, #20]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <rcc_clock_setup_pll+0xb4>)
 8000722:	601a      	str	r2, [r3, #0]
	rcc_apb2_frequency = clock->apb2_frequency;
 8000724:	69a2      	ldr	r2, [r4, #24]
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <rcc_clock_setup_pll+0xb8>)
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bd10      	pop	{r4, pc}
		rcc_set_pllxtpre(clock->prediv1);
 800072c:	f7ff ff4c 	bl	80005c8 <rcc_set_pllxtpre>
 8000730:	e7d0      	b.n	80006d4 <rcc_clock_setup_pll+0x50>
 8000732:	bf00      	nop
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000010 	.word	0x20000010
 800073c:	20000014 	.word	0x20000014

08000740 <rcc_periph_clock_enable>:
 *
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */
void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000740:	2201      	movs	r2, #1
 8000742:	0943      	lsrs	r3, r0, #5
 8000744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000748:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800074c:	6819      	ldr	r1, [r3, #0]
 800074e:	f000 001f 	and.w	r0, r0, #31
 8000752:	fa02 f000 	lsl.w	r0, r2, r0
 8000756:	4308      	orrs	r0, r1
 8000758:	6018      	str	r0, [r3, #0]
}
 800075a:	4770      	bx	lr

0800075c <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 800075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000760:	461e      	mov	r6, r3
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8000762:	6803      	ldr	r3, [r0, #0]
{
 8000764:	4617      	mov	r7, r2
 8000766:	4605      	mov	r5, r0
 8000768:	4688      	mov	r8, r1
	usbd_dev = driver->init();
 800076a:	4798      	blx	r3

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 800076c:	9b06      	ldr	r3, [sp, #24]
	usbd_dev->extra_string_idx = 0;
	usbd_dev->extra_string = NULL;
	usbd_dev->ctrl_buf = control_buffer;
 800076e:	9a07      	ldr	r2, [sp, #28]
	usbd_dev->num_strings = num_strings;
 8000770:	60c3      	str	r3, [r0, #12]
	usbd_dev->extra_string_idx = 0;
 8000772:	2300      	movs	r3, #0
	usbd_dev->ctrl_buf = control_buffer;
 8000774:	6102      	str	r2, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8000776:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	usbd_dev->config = conf;
 800077a:	e9c0 8700 	strd	r8, r7, [r0]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 800077e:	8282      	strh	r2, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8000780:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <usbd_init+0x48>)
	usbd_dev->extra_string = NULL;
 8000782:	e9c0 3338 	strd	r3, r3, [r0, #224]	; 0xe0
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8000786:	6702      	str	r2, [r0, #112]	; 0x70
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <usbd_init+0x4c>)
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 800078a:	e9c0 3332 	strd	r3, r3, [r0, #200]	; 0xc8
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 800078e:	66c2      	str	r2, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <usbd_init+0x50>)
		usbd_dev->user_callback_set_config[i] = NULL;
 8000792:	e9c0 3334 	strd	r3, r3, [r0, #208]	; 0xd0
	usbd_dev->driver = driver;
 8000796:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
	usbd_dev->strings = strings;
 800079a:	6086      	str	r6, [r0, #8]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800079c:	6682      	str	r2, [r0, #104]	; 0x68
	}

	return usbd_dev;
}
 800079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007a2:	bf00      	nop
 80007a4:	080009c1 	.word	0x080009c1
 80007a8:	08000a21 	.word	0x08000a21
 80007ac:	08000aa3 	.word	0x08000aa3

080007b0 <usbd_poll>:
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
	usbd_dev->driver->poll(usbd_dev);
 80007b0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	4718      	bx	r3

080007b8 <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 80007b8:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80007ba:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80007be:	68a4      	ldr	r4, [r4, #8]
 80007c0:	46a4      	mov	ip, r4
}
 80007c2:	bc10      	pop	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80007c4:	4760      	bx	ip

080007c6 <_usbd_reset>:
{
 80007c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 80007c8:	2500      	movs	r5, #0
{
 80007ca:	4604      	mov	r4, r0
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 80007cc:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 80007ce:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 80007d0:	79db      	ldrb	r3, [r3, #7]
 80007d2:	462a      	mov	r2, r5
 80007d4:	4629      	mov	r1, r5
 80007d6:	9500      	str	r5, [sp, #0]
 80007d8:	f7ff ffee 	bl	80007b8 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 80007dc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80007e0:	4629      	mov	r1, r5
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4620      	mov	r0, r4
 80007e6:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 80007e8:	69e3      	ldr	r3, [r4, #28]
 80007ea:	b11b      	cbz	r3, 80007f4 <_usbd_reset+0x2e>
}
 80007ec:	b003      	add	sp, #12
 80007ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		usbd_dev->user_callback_reset();
 80007f2:	4718      	bx	r3
}
 80007f4:	b003      	add	sp, #12
 80007f6:	bd30      	pop	{r4, r5, pc}

080007f8 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 80007f8:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 80007fa:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 80007fe:	69e4      	ldr	r4, [r4, #28]
 8000800:	46a4      	mov	ip, r4
}
 8000802:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000804:	4760      	bx	ip

08000806 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8000806:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000808:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
 800080c:	6a24      	ldr	r4, [r4, #32]
 800080e:	46a4      	mov	ip, r4
}
 8000810:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000812:	4760      	bx	ip

08000814 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8000814:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	4718      	bx	r3

0800081c <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 800081c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4718      	bx	r3

08000824 <usbd_ep_nak_set>:
}

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8000824:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4718      	bx	r3

0800082c <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 800082c:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 800082e:	6803      	ldr	r3, [r0, #0]
{
 8000830:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000832:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8000834:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
 8000836:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000838:	4299      	cmp	r1, r3
 800083a:	d20f      	bcs.n	800085c <usb_control_send_chunk+0x30>
		usbd_ep_write_packet(usbd_dev, 0,
 800083c:	460b      	mov	r3, r1
 800083e:	2100      	movs	r1, #0
 8000840:	f7ff ffda 	bl	80007f8 <usbd_ep_write_packet>
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8000844:	2302      	movs	r3, #2
 8000846:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 800084a:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.ctrl_buf +=
 800084c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
 800084e:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_len -=
 8000850:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8000852:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 8000854:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 8000856:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8000858:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}
 800085a:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 800085c:	2100      	movs	r1, #0
 800085e:	f7ff ffcb 	bl	80007f8 <usbd_ep_write_packet>
			DATA_IN : LAST_DATA_IN;
 8000862:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2302      	movne	r3, #2
 800086c:	2303      	moveq	r3, #3
		usbd_dev->control_state.state =
 800086e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.needs_zlp = false;
 8000872:	2300      	movs	r3, #0
 8000874:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		usbd_dev->control_state.ctrl_len = 0;
 8000878:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 800087a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800087c:	e7ed      	b.n	800085a <usb_control_send_chunk+0x2e>

0800087e <usb_control_request_dispatch>:
}

static enum usbd_request_return_codes
usb_control_request_dispatch(usbd_device *usbd_dev,
			     struct usb_setup_data *req)
{
 800087e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000882:	4604      	mov	r4, r0
 8000884:	460e      	mov	r6, r1
 8000886:	4605      	mov	r5, r0
 8000888:	f100 0a20 	add.w	sl, r0, #32
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 800088c:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8000890:	f100 0b3c 	add.w	fp, r0, #60	; 0x3c
 8000894:	f100 0940 	add.w	r9, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 8000898:	6caf      	ldr	r7, [r5, #72]	; 0x48
 800089a:	b947      	cbnz	r7, 80008ae <usb_control_request_dispatch+0x30>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 800089c:	465b      	mov	r3, fp
 800089e:	4642      	mov	r2, r8
 80008a0:	4631      	mov	r1, r6
 80008a2:	4620      	mov	r0, r4
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 80008a4:	b003      	add	sp, #12
 80008a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 80008aa:	f000 bbdd 	b.w	8001068 <_usbd_standard_request>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 80008ae:	7831      	ldrb	r1, [r6, #0]
 80008b0:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
 80008b4:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 80008b8:	4011      	ands	r1, r2
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d003      	beq.n	80008c6 <usb_control_request_dispatch+0x48>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80008be:	3508      	adds	r5, #8
 80008c0:	4555      	cmp	r5, sl
 80008c2:	d1e9      	bne.n	8000898 <usb_control_request_dispatch+0x1a>
 80008c4:	e7ea      	b.n	800089c <usb_control_request_dispatch+0x1e>
			result = cb[i].cb(usbd_dev, req,
 80008c6:	465b      	mov	r3, fp
 80008c8:	4642      	mov	r2, r8
 80008ca:	4631      	mov	r1, r6
 80008cc:	4620      	mov	r0, r4
 80008ce:	f8cd 9000 	str.w	r9, [sp]
 80008d2:	47b8      	blx	r7
			if (result == USBD_REQ_HANDLED ||
 80008d4:	2801      	cmp	r0, #1
 80008d6:	d8f2      	bhi.n	80008be <usb_control_request_dispatch+0x40>
}
 80008d8:	b003      	add	sp, #12
 80008da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008de <stall_transaction>:
{
 80008de:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2100      	movs	r1, #0
{
 80008e4:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80008e6:	f7ff ff95 	bl	8000814 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80008f0:	bd10      	pop	{r4, pc}

080008f2 <usb_control_recv_chunk>:
{
 80008f2:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80008f8:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80008fa:	79db      	ldrb	r3, [r3, #7]
 80008fc:	1aa4      	subs	r4, r4, r2
 80008fe:	429c      	cmp	r4, r3
 8000900:	bfa8      	it	ge
 8000902:	461c      	movge	r4, r3
				       usbd_dev->control_state.ctrl_buf +
 8000904:	6b81      	ldr	r1, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000906:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8000908:	440a      	add	r2, r1
 800090a:	4633      	mov	r3, r6
 800090c:	2100      	movs	r1, #0
{
 800090e:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8000910:	f7ff ff79 	bl	8000806 <usbd_ep_read_packet>
	if (size != packetsize) {
 8000914:	4286      	cmp	r6, r0
 8000916:	d005      	beq.n	8000924 <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 8000918:	4628      	mov	r0, r5
 800091a:	f7ff ffe0 	bl	80008de <stall_transaction>
		return -1;
 800091e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000922:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 8000924:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8000926:	b2a0      	uxth	r0, r4
 8000928:	441e      	add	r6, r3
 800092a:	87ae      	strh	r6, [r5, #60]	; 0x3c
	return packetsize;
 800092c:	e7f9      	b.n	8000922 <usb_control_recv_chunk+0x30>

0800092e <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 800092e:	b538      	push	{r3, r4, r5, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000930:	6903      	ldr	r3, [r0, #16]
{
 8000932:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000934:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8000936:	798b      	ldrb	r3, [r1, #6]
 8000938:	79ca      	ldrb	r2, [r1, #7]
{
 800093a:	460d      	mov	r5, r1
	usbd_dev->control_state.ctrl_len = req->wLength;
 800093c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000940:	8783      	strh	r3, [r0, #60]	; 0x3c

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8000942:	f7ff ff9c 	bl	800087e <usb_control_request_dispatch>
 8000946:	b300      	cbz	r0, 800098a <usb_control_setup_read+0x5c>
		if (req->wLength) {
 8000948:	88eb      	ldrh	r3, [r5, #6]
 800094a:	b1ab      	cbz	r3, 8000978 <usb_control_setup_read+0x4a>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 800094c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800094e:	6821      	ldr	r1, [r4, #0]
	if (len < wLength) {
 8000950:	4293      	cmp	r3, r2
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8000952:	79c9      	ldrb	r1, [r1, #7]
	if (len < wLength) {
 8000954:	d90e      	bls.n	8000974 <usb_control_setup_read+0x46>
		if (len && (len % ep_size == 0)) {
 8000956:	b132      	cbz	r2, 8000966 <usb_control_setup_read+0x38>
 8000958:	fbb2 f3f1 	udiv	r3, r2, r1
 800095c:	fb01 2213 	mls	r2, r1, r3, r2
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	0952      	lsrs	r2, r2, #5
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8000966:	4620      	mov	r0, r4
			usbd_dev->control_state.needs_zlp =
 8000968:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 800096c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_control_send_chunk(usbd_dev);
 8000970:	f7ff bf5c 	b.w	800082c <usb_control_send_chunk>
	return false;
 8000974:	2200      	movs	r2, #0
 8000976:	e7f6      	b.n	8000966 <usb_control_setup_read+0x38>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8000978:	461a      	mov	r2, r3
 800097a:	4619      	mov	r1, r3
 800097c:	4620      	mov	r0, r4
 800097e:	f7ff ff3b 	bl	80007f8 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8000982:	2304      	movs	r3, #4
 8000984:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000988:	bd38      	pop	{r3, r4, r5, pc}
		stall_transaction(usbd_dev);
 800098a:	4620      	mov	r0, r4
}
 800098c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		stall_transaction(usbd_dev);
 8000990:	f7ff bfa5 	b.w	80008de <stall_transaction>

08000994 <usbd_register_control_callback>:
{
 8000994:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8000996:	2400      	movs	r4, #0
		if (usbd_dev->user_control_callback[i].cb) {
 8000998:	f100 0648 	add.w	r6, r0, #72	; 0x48
 800099c:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 80009a0:	b12d      	cbz	r5, 80009ae <usbd_register_control_callback+0x1a>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80009a2:	3401      	adds	r4, #1
 80009a4:	2c04      	cmp	r4, #4
 80009a6:	d1f9      	bne.n	800099c <usbd_register_control_callback+0x8>
	return -1;
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->user_control_callback[i].type = type;
 80009ae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80009b2:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
		return 0;
 80009b6:	4628      	mov	r0, r5
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 80009b8:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
		usbd_dev->user_control_callback[i].cb = callback;
 80009bc:	64a3      	str	r3, [r4, #72]	; 0x48
		return 0;
 80009be:	e7f5      	b.n	80009ac <usbd_register_control_callback+0x18>

080009c0 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 80009c0:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 80009c2:	2500      	movs	r5, #0
{
 80009c4:	4604      	mov	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	4629      	mov	r1, r5
	usbd_dev->control_state.complete = NULL;
 80009ca:	6405      	str	r5, [r0, #64]	; 0x40
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 80009cc:	f100 0630 	add.w	r6, r0, #48	; 0x30
	usbd_ep_nak_set(usbd_dev, 0, 1);
 80009d0:	f7ff ff28 	bl	8000824 <usbd_ep_nak_set>

	if (req->wLength == 0) {
 80009d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80009d6:	b92a      	cbnz	r2, 80009e4 <_usbd_control_setup+0x24>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 80009d8:	4631      	mov	r1, r6
 80009da:	4620      	mov	r0, r4
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 80009dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_control_setup_read(usbd_dev, req);
 80009e0:	f7ff bfa5 	b.w	800092e <usb_control_setup_read>
	} else if (req->bmRequestType & 0x80) {
 80009e4:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dbf5      	blt.n	80009d8 <_usbd_control_setup+0x18>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 80009ec:	8aa3      	ldrh	r3, [r4, #20]
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d204      	bcs.n	80009fc <_usbd_control_setup+0x3c>
		stall_transaction(usbd_dev);
 80009f2:	4620      	mov	r0, r4
}
 80009f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		stall_transaction(usbd_dev);
 80009f8:	f7ff bf71 	b.w	80008de <stall_transaction>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80009fc:	6923      	ldr	r3, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 80009fe:	87a5      	strh	r5, [r4, #60]	; 0x3c
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000a00:	63a3      	str	r3, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000a02:	6823      	ldr	r3, [r4, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000a04:	4629      	mov	r1, r5
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000a06:	79db      	ldrb	r3, [r3, #7]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000a08:	4620      	mov	r0, r4
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	bf34      	ite	cc
 8000a0e:	2305      	movcc	r3, #5
 8000a10:	2306      	movcs	r3, #6
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000a12:	462a      	mov	r2, r5
 8000a14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000a1c:	f7ff bf02 	b.w	8000824 <usbd_ep_nak_set>

08000a20 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8000a20:	b510      	push	{r4, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8000a22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8000a26:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8000a28:	2b06      	cmp	r3, #6
 8000a2a:	d012      	beq.n	8000a52 <_usbd_control_out+0x32>
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d027      	beq.n	8000a80 <_usbd_control_out+0x60>
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d121      	bne.n	8000a78 <_usbd_control_out+0x58>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000a34:	f7ff ff5d 	bl	80008f2 <usb_control_recv_chunk>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	db09      	blt.n	8000a50 <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8000a3c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8000a3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000a40:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 8000a46:	4293      	cmp	r3, r2
 8000a48:	dc02      	bgt.n	8000a50 <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8000a4a:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 8000a4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000a50:	bd10      	pop	{r4, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000a52:	f7ff ff4e 	bl	80008f2 <usb_control_recv_chunk>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	dbfa      	blt.n	8000a50 <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a60:	f7ff ff0d 	bl	800087e <usb_control_request_dispatch>
 8000a64:	b138      	cbz	r0, 8000a76 <_usbd_control_out+0x56>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8000a66:	2300      	movs	r3, #0
 8000a68:	4620      	mov	r0, r4
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fec3 	bl	80007f8 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8000a72:	2304      	movs	r3, #4
 8000a74:	e7ea      	b.n	8000a4c <_usbd_control_out+0x2c>
			stall_transaction(usbd_dev);
 8000a76:	4620      	mov	r0, r4
}
 8000a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8000a7c:	f7ff bf2f 	b.w	80008de <stall_transaction>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8000a80:	2300      	movs	r3, #0
 8000a82:	461a      	mov	r2, r3
 8000a84:	4619      	mov	r1, r3
 8000a86:	f7ff febe 	bl	8000806 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8000a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a92:	b11b      	cbz	r3, 8000a9c <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 8000a94:	4620      	mov	r0, r4
 8000a96:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8000a9a:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8000aa0:	e7d6      	b.n	8000a50 <_usbd_control_out+0x30>

08000aa2 <_usbd_control_in>:

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8000aa2:	b510      	push	{r4, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8000aa4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8000aa8:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d007      	beq.n	8000abe <_usbd_control_in+0x1c>
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d00e      	beq.n	8000ad0 <_usbd_control_in+0x2e>
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d123      	bne.n	8000afe <_usbd_control_in+0x5c>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 8000aba:	f7ff beb7 	b.w	800082c <usb_control_send_chunk>
		usbd_dev->control_state.state = STATUS_OUT;
 8000abe:	2307      	movs	r3, #7
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000ac0:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 8000ac2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000ac6:	4611      	mov	r1, r2
}
 8000ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000acc:	f7ff beaa 	b.w	8000824 <usbd_ep_nak_set>
		if (usbd_dev->control_state.complete) {
 8000ad0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ad2:	b113      	cbz	r3, 8000ada <_usbd_control_in+0x38>
			usbd_dev->control_state.complete(usbd_dev,
 8000ad4:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8000ad8:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8000ada:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000ade:	b953      	cbnz	r3, 8000af6 <_usbd_control_in+0x54>
 8000ae0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d106      	bne.n	8000af6 <_usbd_control_in+0x54>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8000ae8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8000aea:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000aee:	4620      	mov	r0, r4
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	b2c9      	uxtb	r1, r1
 8000af4:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8000afc:	bd10      	pop	{r4, pc}
 8000afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8000b02:	f7ff beec 	b.w	80008de <stall_transaction>

08000b06 <usb_standard_set_address>:

static enum usbd_request_return_codes
usb_standard_set_address(usbd_device *usbd_dev,
			 struct usb_setup_data *req, uint8_t **buf,
			 uint16_t *len)
{
 8000b06:	b508      	push	{r3, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8000b08:	780b      	ldrb	r3, [r1, #0]
 8000b0a:	b96b      	cbnz	r3, 8000b28 <usb_standard_set_address+0x22>
 8000b0c:	8849      	ldrh	r1, [r1, #2]
 8000b0e:	297f      	cmp	r1, #127	; 0x7f
 8000b10:	d80b      	bhi.n	8000b2a <usb_standard_set_address+0x24>

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8000b12:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	usbd_dev->current_address = req->wValue;
 8000b16:	b2c9      	uxtb	r1, r1
 8000b18:	7581      	strb	r1, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8000b1a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000b1e:	b10a      	cbz	r2, 8000b24 <usb_standard_set_address+0x1e>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	4798      	blx	r3
	}

	return USBD_REQ_HANDLED;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <usb_standard_set_address+0x24>
		return USBD_REQ_NOTSUPP;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd08      	pop	{r3, pc}

08000b2e <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 8000b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b30:	460d      	mov	r5, r1

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 8000b32:	8849      	ldrh	r1, [r1, #2]
{
 8000b34:	4604      	mov	r4, r0
	if (req->wValue > 0) {
 8000b36:	b179      	cbz	r1, 8000b58 <usb_standard_set_configuration+0x2a>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8000b38:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8000b3a:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8000b3c:	7c58      	ldrb	r0, [r3, #17]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d801      	bhi.n	8000b48 <usb_standard_set_configuration+0x1a>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8000b44:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8000b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 8000b48:	6862      	ldr	r2, [r4, #4]
 8000b4a:	fb06 2203 	mla	r2, r6, r3, r2
			if (req->wValue
 8000b4e:	7952      	ldrb	r2, [r2, #5]
 8000b50:	428a      	cmp	r2, r1
 8000b52:	d003      	beq.n	8000b5c <usb_standard_set_configuration+0x2e>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8000b54:	3301      	adds	r3, #1
 8000b56:	e7f3      	b.n	8000b40 <usb_standard_set_configuration+0x12>
	int found_index = -1;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	usbd_dev->current_config = found_index + 1;
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 8000b62:	b94b      	cbnz	r3, 8000b78 <usb_standard_set_configuration+0x4a>
	usbd_dev->driver->ep_reset(usbd_dev);
 8000b64:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8000b68:	4620      	mov	r0, r4
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8000b6e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8000b72:	b99b      	cbnz	r3, 8000b9c <usb_standard_set_configuration+0x6e>
	return USBD_REQ_HANDLED;
 8000b74:	2001      	movs	r0, #1
 8000b76:	e7e6      	b.n	8000b46 <usb_standard_set_configuration+0x18>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8000b78:	220d      	movs	r2, #13
 8000b7a:	4353      	muls	r3, r2
 8000b7c:	6862      	ldr	r2, [r4, #4]
 8000b7e:	3b0d      	subs	r3, #13
 8000b80:	4413      	add	r3, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000b82:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 8000b84:	4610      	mov	r0, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000b86:	7919      	ldrb	r1, [r3, #4]
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d9eb      	bls.n	8000b64 <usb_standard_set_configuration+0x36>
			if (cfg->interface[i].cur_altsetting) {
 8000b8c:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8000b90:	0116      	lsls	r6, r2, #4
 8000b92:	5871      	ldr	r1, [r6, r1]
 8000b94:	b101      	cbz	r1, 8000b98 <usb_standard_set_configuration+0x6a>
				*cfg->interface[i].cur_altsetting = 0;
 8000b96:	7008      	strb	r0, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000b98:	3201      	adds	r2, #1
 8000b9a:	e7f4      	b.n	8000b86 <usb_standard_set_configuration+0x58>
			usbd_dev->user_control_callback[i].cb = NULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8000ba2:	64a3      	str	r3, [r4, #72]	; 0x48
 8000ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ba6:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ba8:	6623      	str	r3, [r4, #96]	; 0x60
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000baa:	f104 07d8 	add.w	r7, r4, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8000bae:	f856 3b04 	ldr.w	r3, [r6], #4
 8000bb2:	b113      	cbz	r3, 8000bba <usb_standard_set_configuration+0x8c>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	8869      	ldrh	r1, [r5, #2]
 8000bb8:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000bba:	42b7      	cmp	r7, r6
 8000bbc:	d1f7      	bne.n	8000bae <usb_standard_set_configuration+0x80>
 8000bbe:	e7d9      	b.n	8000b74 <usb_standard_set_configuration+0x46>

08000bc0 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8000bc0:	8819      	ldrh	r1, [r3, #0]
 8000bc2:	2901      	cmp	r1, #1
		*len = 1;
 8000bc4:	bf84      	itt	hi
 8000bc6:	2101      	movhi	r1, #1
 8000bc8:	8019      	strhhi	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8000bca:	7dc3      	ldrb	r3, [r0, #23]
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8000bcc:	6811      	ldr	r1, [r2, #0]
	if (usbd_dev->current_config > 0) {
 8000bce:	b12b      	cbz	r3, 8000bdc <usb_standard_get_configuration+0x1c>
		(*buf)[0] = cfg->bConfigurationValue;
 8000bd0:	6842      	ldr	r2, [r0, #4]
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	fb00 2303 	mla	r3, r0, r3, r2
 8000bd8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 8000bdc:	2001      	movs	r0, #1
		(*buf)[0] = 0;
 8000bde:	700b      	strb	r3, [r1, #0]
}
 8000be0:	4770      	bx	lr

08000be2 <usb_standard_set_interface>:

static enum usbd_request_return_codes
usb_standard_set_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8000be2:	b570      	push	{r4, r5, r6, lr}
 8000be4:	461c      	mov	r4, r3
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000be6:	230d      	movs	r3, #13
 8000be8:	7dc2      	ldrb	r2, [r0, #23]
 8000bea:	435a      	muls	r2, r3
	const struct usb_config_descriptor *cfx =
 8000bec:	6843      	ldr	r3, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000bee:	3a0d      	subs	r2, #13
	const struct usb_config_descriptor *cfx =
 8000bf0:	4413      	add	r3, r2
	const struct usb_interface *iface;

	(void)buf;

	if (req->wIndex >= cfx->bNumInterfaces) {
 8000bf2:	791d      	ldrb	r5, [r3, #4]
 8000bf4:	888a      	ldrh	r2, [r1, #4]
 8000bf6:	4295      	cmp	r5, r2
 8000bf8:	d919      	bls.n	8000c2e <usb_standard_set_interface+0x4c>
		return USBD_REQ_NOTSUPP;
	}

	iface = &cfx->interface[req->wIndex];
 8000bfa:	f8d3 5009 	ldr.w	r5, [r3, #9]
 8000bfe:	0116      	lsls	r6, r2, #4
 8000c00:	eb05 1202 	add.w	r2, r5, r2, lsl #4

	if (req->wValue >= iface->num_altsetting) {
 8000c04:	884b      	ldrh	r3, [r1, #2]
 8000c06:	7912      	ldrb	r2, [r2, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d910      	bls.n	8000c2e <usb_standard_set_interface+0x4c>
		return USBD_REQ_NOTSUPP;
	}

	if (iface->cur_altsetting) {
 8000c0c:	59aa      	ldr	r2, [r5, r6]
 8000c0e:	b152      	cbz	r2, 8000c26 <usb_standard_set_interface+0x44>
		*iface->cur_altsetting = req->wValue;
 8000c10:	7013      	strb	r3, [r2, #0]
	} else if (req->wValue > 0) {
		return USBD_REQ_NOTSUPP;
	}

	if (usbd_dev->user_callback_set_altsetting) {
 8000c12:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8000c16:	b113      	cbz	r3, 8000c1e <usb_standard_set_interface+0x3c>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8000c18:	884a      	ldrh	r2, [r1, #2]
 8000c1a:	8889      	ldrh	r1, [r1, #4]
 8000c1c:	4798      	blx	r3
							       req->wIndex,
							       req->wValue);
	}

	*len = 0;
 8000c1e:	2300      	movs	r3, #0

	return USBD_REQ_HANDLED;
 8000c20:	2001      	movs	r0, #1
	*len = 0;
 8000c22:	8023      	strh	r3, [r4, #0]
}
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f3      	beq.n	8000c12 <usb_standard_set_interface+0x30>
		return USBD_REQ_NOTSUPP;
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	e7fa      	b.n	8000c24 <usb_standard_set_interface+0x42>
 8000c2e:	2000      	movs	r0, #0
 8000c30:	e7f8      	b.n	8000c24 <usb_standard_set_interface+0x42>

08000c32 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8000c32:	b530      	push	{r4, r5, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000c34:	250d      	movs	r5, #13
 8000c36:	7dc4      	ldrb	r4, [r0, #23]
	const struct usb_config_descriptor *cfx =
 8000c38:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000c3a:	436c      	muls	r4, r5
 8000c3c:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 8000c3e:	4404      	add	r4, r0

	if (req->wIndex >= cfx->bNumInterfaces) {
 8000c40:	888d      	ldrh	r5, [r1, #4]
 8000c42:	7920      	ldrb	r0, [r4, #4]
 8000c44:	4285      	cmp	r5, r0
 8000c46:	d20c      	bcs.n	8000c62 <usb_standard_get_interface+0x30>
		return USBD_REQ_NOTSUPP;
	}

	*len = 1;
 8000c48:	2001      	movs	r0, #1
 8000c4a:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8000c4c:	888b      	ldrh	r3, [r1, #4]
 8000c4e:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8000c56:	b103      	cbz	r3, 8000c5a <usb_standard_get_interface+0x28>
 8000c58:	781b      	ldrb	r3, [r3, #0]

	return USBD_REQ_HANDLED;
 8000c5a:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	7013      	strb	r3, [r2, #0]
}
 8000c60:	bd30      	pop	{r4, r5, pc}
		return USBD_REQ_NOTSUPP;
 8000c62:	2000      	movs	r0, #0
 8000c64:	e7fc      	b.n	8000c60 <usb_standard_get_interface+0x2e>

08000c66 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8000c66:	8819      	ldrh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8000c68:	2001      	movs	r0, #1
	if (*len > 2) {
 8000c6a:	2902      	cmp	r1, #2
		*len = 2;
 8000c6c:	bf84      	itt	hi
 8000c6e:	2102      	movhi	r1, #2
 8000c70:	8019      	strhhi	r1, [r3, #0]
	(*buf)[0] = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	6811      	ldr	r1, [r2, #0]
 8000c76:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	7053      	strb	r3, [r2, #1]
}
 8000c7c:	4770      	bx	lr

08000c7e <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8000c7e:	b510      	push	{r4, lr}
 8000c80:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 8000c82:	881a      	ldrh	r2, [r3, #0]
 8000c84:	2a02      	cmp	r2, #2
		*len = 2;
 8000c86:	bf84      	itt	hi
 8000c88:	2202      	movhi	r2, #2
 8000c8a:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8000c8c:	8889      	ldrh	r1, [r1, #4]
 8000c8e:	b2c9      	uxtb	r1, r1
 8000c90:	f7ff fdc4 	bl	800081c <usbd_ep_stall_get>
 8000c94:	3800      	subs	r0, #0
 8000c96:	bf18      	it	ne
 8000c98:	2001      	movne	r0, #1
	(*buf)[1] = 0;
 8000c9a:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8000ca0:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8000ca2:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 8000ca4:	705a      	strb	r2, [r3, #1]
}
 8000ca6:	bd10      	pop	{r4, pc}

08000ca8 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8000ca8:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8000caa:	8889      	ldrh	r1, [r1, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	b2c9      	uxtb	r1, r1
 8000cb0:	f7ff fdb0 	bl	8000814 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	bd08      	pop	{r3, pc}

08000cb8 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8000cb8:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8000cba:	8889      	ldrh	r1, [r1, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	b2c9      	uxtb	r1, r1
 8000cc0:	f7ff fda8 	bl	8000814 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	bd08      	pop	{r3, pc}

08000cc8 <usb_standard_get_descriptor>:
{
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	461f      	mov	r7, r3
	descr_idx = usb_descriptor_index(req->wValue);
 8000cce:	884b      	ldrh	r3, [r1, #2]
{
 8000cd0:	4605      	mov	r5, r0
	return wValue >> 8;
 8000cd2:	0a18      	lsrs	r0, r3, #8
	switch (usb_descriptor_type(req->wValue)) {
 8000cd4:	2802      	cmp	r0, #2
{
 8000cd6:	4616      	mov	r6, r2
 8000cd8:	b089      	sub	sp, #36	; 0x24
	switch (usb_descriptor_type(req->wValue)) {
 8000cda:	d010      	beq.n	8000cfe <usb_standard_get_descriptor+0x36>
 8000cdc:	2803      	cmp	r0, #3
 8000cde:	f000 80ed 	beq.w	8000ebc <usb_standard_get_descriptor+0x1f4>
 8000ce2:	2801      	cmp	r0, #1
 8000ce4:	f040 8141 	bne.w	8000f6a <usb_standard_get_descriptor+0x2a2>
		*buf = (uint8_t *) usbd_dev->desc;
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	6013      	str	r3, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	883a      	ldrh	r2, [r7, #0]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	bf28      	it	cs
 8000cf4:	4613      	movcs	r3, r2
 8000cf6:	803b      	strh	r3, [r7, #0]
}
 8000cf8:	b009      	add	sp, #36	; 0x24
 8000cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000cfe:	f04f 080d 	mov.w	r8, #13
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	fb08 f803 	mul.w	r8, r8, r3
		*buf = usbd_dev->ctrl_buf;
 8000d08:	692a      	ldr	r2, [r5, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000d0a:	f8d5 9004 	ldr.w	r9, [r5, #4]
		*buf = usbd_dev->ctrl_buf;
 8000d0e:	6032      	str	r2, [r6, #0]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8000d10:	f819 5008 	ldrb.w	r5, [r9, r8]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8000d14:	883c      	ldrh	r4, [r7, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000d16:	eb09 0308 	add.w	r3, r9, r8
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8000d1a:	42a5      	cmp	r5, r4
 8000d1c:	bf28      	it	cs
 8000d1e:	4625      	movcs	r5, r4
		*buf = usbd_dev->ctrl_buf;
 8000d20:	9202      	str	r2, [sp, #8]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8000d22:	4619      	mov	r1, r3
 8000d24:	462a      	mov	r2, r5
 8000d26:	9802      	ldr	r0, [sp, #8]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000d28:	9304      	str	r3, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8000d2a:	f7ff fb6b 	bl	8000404 <memcpy>
	buf += count;
 8000d2e:	9b02      	ldr	r3, [sp, #8]
	len -= count;
 8000d30:	1b64      	subs	r4, r4, r5
	buf += count;
 8000d32:	195e      	adds	r6, r3, r5
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000d34:	2300      	movs	r3, #0
	totallen += cfg->bLength;
 8000d36:	f819 8008 	ldrb.w	r8, [r9, r8]
	len -= count;
 8000d3a:	b2a4      	uxth	r4, r4
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	9b04      	ldr	r3, [sp, #16]
 8000d40:	791a      	ldrb	r2, [r3, #4]
 8000d42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d805      	bhi.n	8000d56 <usb_standard_get_descriptor+0x8e>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8000d4a:	9b02      	ldr	r3, [sp, #8]
 8000d4c:	f8a3 8002 	strh.w	r8, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8000d50:	803d      	strh	r5, [r7, #0]
		return USBD_REQ_HANDLED;
 8000d52:	2001      	movs	r0, #1
 8000d54:	e7d0      	b.n	8000cf8 <usb_standard_get_descriptor+0x30>
		if (cfg->interface[i].iface_assoc) {
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	9a01      	ldr	r2, [sp, #4]
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	9305      	str	r3, [sp, #20]
 8000d5e:	9b04      	ldr	r3, [sp, #16]
 8000d60:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8000d64:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000d68:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8000d6c:	f1ba 0f00 	cmp.w	sl, #0
 8000d70:	d014      	beq.n	8000d9c <usb_standard_get_descriptor+0xd4>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8000d72:	f89a 9000 	ldrb.w	r9, [sl]
 8000d76:	4630      	mov	r0, r6
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	bf28      	it	cs
 8000d7c:	46a1      	movcs	r9, r4
 8000d7e:	4651      	mov	r1, sl
 8000d80:	464a      	mov	r2, r9
 8000d82:	f7ff fb3f 	bl	8000404 <memcpy>
			totallen += assoc->bLength;
 8000d86:	f89a 3000 	ldrb.w	r3, [sl]
			len -= count;
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
			total += count;
 8000d8e:	444d      	add	r5, r9
			totallen += assoc->bLength;
 8000d90:	4498      	add	r8, r3
			buf += count;
 8000d92:	444e      	add	r6, r9
			len -= count;
 8000d94:	b2a4      	uxth	r4, r4
			total += count;
 8000d96:	b2ad      	uxth	r5, r5
			totallen += assoc->bLength;
 8000d98:	fa1f f888 	uxth.w	r8, r8
{
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9303      	str	r3, [sp, #12]
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8000da0:	9b04      	ldr	r3, [sp, #16]
 8000da2:	9a05      	ldr	r2, [sp, #20]
 8000da4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8000da8:	4413      	add	r3, r2
 8000daa:	7919      	ldrb	r1, [r3, #4]
 8000dac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000db0:	4291      	cmp	r1, r2
 8000db2:	d802      	bhi.n	8000dba <usb_standard_get_descriptor+0xf2>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000db4:	9b01      	ldr	r3, [sp, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	e7c0      	b.n	8000d3c <usb_standard_get_descriptor+0x74>
			const struct usb_interface_descriptor *iface =
 8000dba:	2115      	movs	r1, #21
 8000dbc:	9a03      	ldr	r2, [sp, #12]
 8000dbe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8000dc2:	fb01 f902 	mul.w	r9, r1, r2
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8000dc6:	f81a b009 	ldrb.w	fp, [sl, r9]
			const struct usb_interface_descriptor *iface =
 8000dca:	eb0a 0309 	add.w	r3, sl, r9
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8000dce:	45a3      	cmp	fp, r4
 8000dd0:	bf28      	it	cs
 8000dd2:	46a3      	movcs	fp, r4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	465a      	mov	r2, fp
			const struct usb_interface_descriptor *iface =
 8000dda:	9300      	str	r3, [sp, #0]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8000ddc:	f7ff fb12 	bl	8000404 <memcpy>
			totallen += iface->bLength;
 8000de0:	f81a 3009 	ldrb.w	r3, [sl, r9]
			len -= count;
 8000de4:	eba4 040b 	sub.w	r4, r4, fp
			totallen += iface->bLength;
 8000de8:	4498      	add	r8, r3
			if (iface->extra) {
 8000dea:	9b00      	ldr	r3, [sp, #0]
			total += count;
 8000dec:	445d      	add	r5, fp
			if (iface->extra) {
 8000dee:	f8d3 100d 	ldr.w	r1, [r3, #13]
			buf += count;
 8000df2:	445e      	add	r6, fp
			len -= count;
 8000df4:	b2a4      	uxth	r4, r4
			total += count;
 8000df6:	b2ad      	uxth	r5, r5
			totallen += iface->bLength;
 8000df8:	fa1f f888 	uxth.w	r8, r8
			if (iface->extra) {
 8000dfc:	b1b1      	cbz	r1, 8000e2c <usb_standard_get_descriptor+0x164>
				       count = MIN(len, iface->extralen));
 8000dfe:	f8d3 a011 	ldr.w	sl, [r3, #17]
				memcpy(buf, iface->extra,
 8000e02:	4630      	mov	r0, r6
				       count = MIN(len, iface->extralen));
 8000e04:	45a2      	cmp	sl, r4
 8000e06:	bfa8      	it	ge
 8000e08:	46a2      	movge	sl, r4
 8000e0a:	fa1f f98a 	uxth.w	r9, sl
				memcpy(buf, iface->extra,
 8000e0e:	464a      	mov	r2, r9
 8000e10:	f7ff faf8 	bl	8000404 <memcpy>
				totallen += iface->extralen;
 8000e14:	9b00      	ldr	r3, [sp, #0]
				len -= count;
 8000e16:	eba4 0409 	sub.w	r4, r4, r9
				totallen += iface->extralen;
 8000e1a:	f8d3 3011 	ldr.w	r3, [r3, #17]
				total += count;
 8000e1e:	444d      	add	r5, r9
				totallen += iface->extralen;
 8000e20:	4498      	add	r8, r3
				buf += count;
 8000e22:	444e      	add	r6, r9
				len -= count;
 8000e24:	b2a4      	uxth	r4, r4
				total += count;
 8000e26:	b2ad      	uxth	r5, r5
				totallen += iface->extralen;
 8000e28:	fa1f f888 	uxth.w	r8, r8
{
 8000e2c:	f04f 0900 	mov.w	r9, #0
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8000e30:	9b00      	ldr	r3, [sp, #0]
 8000e32:	791a      	ldrb	r2, [r3, #4]
 8000e34:	fa1f f389 	uxth.w	r3, r9
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d802      	bhi.n	8000e42 <usb_standard_get_descriptor+0x17a>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8000e3c:	9b03      	ldr	r3, [sp, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	e7ad      	b.n	8000d9e <usb_standard_get_descriptor+0xd6>
				    &iface->endpoint[k];
 8000e42:	9b00      	ldr	r3, [sp, #0]
				const struct usb_endpoint_descriptor *ep =
 8000e44:	ebc9 1b09 	rsb	fp, r9, r9, lsl #4
				    &iface->endpoint[k];
 8000e48:	f8d3 3009 	ldr.w	r3, [r3, #9]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f813 200b 	ldrb.w	r2, [r3, fp]
				const struct usb_endpoint_descriptor *ep =
 8000e52:	eb03 0a0b 	add.w	sl, r3, fp
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8000e56:	42a2      	cmp	r2, r4
 8000e58:	bf28      	it	cs
 8000e5a:	4622      	movcs	r2, r4
 8000e5c:	4651      	mov	r1, sl
 8000e5e:	9307      	str	r3, [sp, #28]
 8000e60:	9206      	str	r2, [sp, #24]
 8000e62:	f7ff facf 	bl	8000404 <memcpy>
				totallen += ep->bLength;
 8000e66:	9b07      	ldr	r3, [sp, #28]
				buf += count;
 8000e68:	9a06      	ldr	r2, [sp, #24]
				totallen += ep->bLength;
 8000e6a:	f813 300b 	ldrb.w	r3, [r3, fp]
				if (ep->extra) {
 8000e6e:	f8da 1007 	ldr.w	r1, [sl, #7]
				len -= count;
 8000e72:	1aa4      	subs	r4, r4, r2
				total += count;
 8000e74:	4415      	add	r5, r2
				totallen += ep->bLength;
 8000e76:	4498      	add	r8, r3
				buf += count;
 8000e78:	4416      	add	r6, r2
				len -= count;
 8000e7a:	b2a4      	uxth	r4, r4
				total += count;
 8000e7c:	b2ad      	uxth	r5, r5
				totallen += ep->bLength;
 8000e7e:	fa1f f888 	uxth.w	r8, r8
				if (ep->extra) {
 8000e82:	b1c1      	cbz	r1, 8000eb6 <usb_standard_get_descriptor+0x1ee>
					       count = MIN(len, ep->extralen));
 8000e84:	f8da 200b 	ldr.w	r2, [sl, #11]
					memcpy(buf, ep->extra,
 8000e88:	4630      	mov	r0, r6
					       count = MIN(len, ep->extralen));
 8000e8a:	42a2      	cmp	r2, r4
 8000e8c:	bfa8      	it	ge
 8000e8e:	4622      	movge	r2, r4
 8000e90:	fa1f fb82 	uxth.w	fp, r2
					memcpy(buf, ep->extra,
 8000e94:	465a      	mov	r2, fp
 8000e96:	f8cd b018 	str.w	fp, [sp, #24]
 8000e9a:	f7ff fab3 	bl	8000404 <memcpy>
					totallen += ep->extralen;
 8000e9e:	f8da 300b 	ldr.w	r3, [sl, #11]
					buf += count;
 8000ea2:	9a06      	ldr	r2, [sp, #24]
					len -= count;
 8000ea4:	eba4 040b 	sub.w	r4, r4, fp
					total += count;
 8000ea8:	445d      	add	r5, fp
					totallen += ep->extralen;
 8000eaa:	4498      	add	r8, r3
					buf += count;
 8000eac:	4416      	add	r6, r2
					len -= count;
 8000eae:	b2a4      	uxth	r4, r4
					total += count;
 8000eb0:	b2ad      	uxth	r5, r5
					totallen += ep->extralen;
 8000eb2:	fa1f f888 	uxth.w	r8, r8
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8000eb6:	f109 0901 	add.w	r9, r9, #1
 8000eba:	e7b9      	b.n	8000e30 <usb_standard_get_descriptor+0x168>
		if (descr_idx == 0) {
 8000ebc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8000ec0:	692c      	ldr	r4, [r5, #16]
		if (descr_idx == 0) {
 8000ec2:	d10d      	bne.n	8000ee0 <usb_standard_get_descriptor+0x218>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	70a3      	strb	r3, [r4, #2]
 8000ec8:	2304      	movs	r3, #4
 8000eca:	70e3      	strb	r3, [r4, #3]
			sd->bLength = sizeof(sd->bLength) +
 8000ecc:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	bf28      	it	cs
 8000ed4:	2304      	movcs	r3, #4
 8000ed6:	803b      	strh	r3, [r7, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	7063      	strb	r3, [r4, #1]
		*buf = (uint8_t *)sd;
 8000edc:	6034      	str	r4, [r6, #0]
 8000ede:	e738      	b.n	8000d52 <usb_standard_get_descriptor+0x8a>
		} else if (descr_idx == usbd_dev->extra_string_idx) {
 8000ee0:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d119      	bne.n	8000f1c <usb_standard_get_descriptor+0x254>
			sd->bLength = strlen(usbd_dev->extra_string) * 2 +
 8000ee8:	f8d5 50e4 	ldr.w	r5, [r5, #228]	; 0xe4
 8000eec:	4628      	mov	r0, r5
 8000eee:	f000 fc33 	bl	8001758 <strlen>
				      sizeof(sd->bLength) +
 8000ef2:	3001      	adds	r0, #1
			sd->bLength = strlen(usbd_dev->extra_string) * 2 +
 8000ef4:	0040      	lsls	r0, r0, #1
 8000ef6:	b2c0      	uxtb	r0, r0
 8000ef8:	7020      	strb	r0, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8000efa:	883b      	ldrh	r3, [r7, #0]
 8000efc:	4298      	cmp	r0, r3
 8000efe:	bf28      	it	cs
 8000f00:	4618      	movcs	r0, r3
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000f02:	2300      	movs	r3, #0
			*len = MIN(*len, sd->bLength);
 8000f04:	8038      	strh	r0, [r7, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000f06:	883a      	ldrh	r2, [r7, #0]
 8000f08:	0852      	lsrs	r2, r2, #1
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dde3      	ble.n	8000ed8 <usb_standard_get_descriptor+0x210>
					usbd_dev->extra_string[i];
 8000f10:	5ce9      	ldrb	r1, [r5, r3]
				sd->wData[i] =
 8000f12:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 8000f16:	8051      	strh	r1, [r2, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000f18:	3301      	adds	r3, #1
 8000f1a:	e7f4      	b.n	8000f06 <usb_standard_get_descriptor+0x23e>
			if (!usbd_dev->strings) {
 8000f1c:	68a8      	ldr	r0, [r5, #8]
			array_idx = descr_idx - 1;
 8000f1e:	3b01      	subs	r3, #1
			if (!usbd_dev->strings) {
 8000f20:	2800      	cmp	r0, #0
 8000f22:	f43f aee9 	beq.w	8000cf8 <usb_standard_get_descriptor+0x30>
			if (array_idx >= usbd_dev->num_strings) {
 8000f26:	68ea      	ldr	r2, [r5, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dd1e      	ble.n	8000f6a <usb_standard_get_descriptor+0x2a2>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8000f2c:	f240 4209 	movw	r2, #1033	; 0x409
 8000f30:	8889      	ldrh	r1, [r1, #4]
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d119      	bne.n	8000f6a <usb_standard_get_descriptor+0x2a2>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8000f36:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f000 fc0c 	bl	8001758 <strlen>
				      sizeof(sd->bLength) +
 8000f40:	3001      	adds	r0, #1
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8000f42:	0040      	lsls	r0, r0, #1
 8000f44:	b2c0      	uxtb	r0, r0
 8000f46:	7020      	strb	r0, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	bf28      	it	cs
 8000f4e:	4618      	movcs	r0, r3
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000f50:	2300      	movs	r3, #0
			*len = MIN(*len, sd->bLength);
 8000f52:	8038      	strh	r0, [r7, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000f54:	883a      	ldrh	r2, [r7, #0]
 8000f56:	0852      	lsrs	r2, r2, #1
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	ddbc      	ble.n	8000ed8 <usb_standard_get_descriptor+0x210>
					usbd_dev->strings[array_idx][i];
 8000f5e:	5ce9      	ldrb	r1, [r5, r3]
				sd->wData[i] =
 8000f60:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 8000f64:	8051      	strh	r1, [r2, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000f66:	3301      	adds	r3, #1
 8000f68:	e7f4      	b.n	8000f54 <usb_standard_get_descriptor+0x28c>
				return USBD_REQ_NOTSUPP;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e6c4      	b.n	8000cf8 <usb_standard_get_descriptor+0x30>

08000f6e <usb_standard_interface_get_status>:
 8000f6e:	8819      	ldrh	r1, [r3, #0]
 8000f70:	2001      	movs	r0, #1
 8000f72:	2902      	cmp	r1, #2
 8000f74:	bf84      	itt	hi
 8000f76:	2102      	movhi	r1, #2
 8000f78:	8019      	strhhi	r1, [r3, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6811      	ldr	r1, [r2, #0]
 8000f7e:	700b      	strb	r3, [r1, #0]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	7053      	strb	r3, [r2, #1]
 8000f84:	4770      	bx	lr

08000f86 <usbd_register_set_config_callback>:
{
 8000f86:	4602      	mov	r2, r0
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000f88:	2300      	movs	r3, #0
{
 8000f8a:	b510      	push	{r4, lr}
 8000f8c:	f100 04c8 	add.w	r4, r0, #200	; 0xc8
		if (usbd_dev->user_callback_set_config[i]) {
 8000f90:	f854 0b04 	ldr.w	r0, [r4], #4
 8000f94:	b138      	cbz	r0, 8000fa6 <usbd_register_set_config_callback+0x20>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 8000f96:	4288      	cmp	r0, r1
 8000f98:	d009      	beq.n	8000fae <usbd_register_set_config_callback+0x28>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d1f7      	bne.n	8000f90 <usbd_register_set_config_callback+0xa>
	return -1;
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000fa4:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 8000fa6:	3332      	adds	r3, #50	; 0x32
 8000fa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 0;
 8000fac:	e7fa      	b.n	8000fa4 <usbd_register_set_config_callback+0x1e>
				return 0;
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e7f8      	b.n	8000fa4 <usbd_register_set_config_callback+0x1e>
	...

08000fb4 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8000fb4:	b410      	push	{r4}
 8000fb6:	784c      	ldrb	r4, [r1, #1]
 8000fb8:	2c09      	cmp	r4, #9
 8000fba:	d812      	bhi.n	8000fe2 <_usbd_standard_request_device+0x2e>
 8000fbc:	e8df f004 	tbb	[pc, r4]
 8000fc0:	1111110d 	.word	0x1111110d
 8000fc4:	110b0f11 	.word	0x110b0f11
 8000fc8:	0509      	.short	0x0509
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8000fca:	4c07      	ldr	r4, [pc, #28]	; (8000fe8 <_usbd_standard_request_device+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8000fcc:	46a4      	mov	ip, r4
}
 8000fce:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8000fd0:	4760      	bx	ip
		command = usb_standard_get_configuration;
 8000fd2:	4c06      	ldr	r4, [pc, #24]	; (8000fec <_usbd_standard_request_device+0x38>)
		break;
 8000fd4:	e7fa      	b.n	8000fcc <_usbd_standard_request_device+0x18>
		command = usb_standard_get_descriptor;
 8000fd6:	4c06      	ldr	r4, [pc, #24]	; (8000ff0 <_usbd_standard_request_device+0x3c>)
		break;
 8000fd8:	e7f8      	b.n	8000fcc <_usbd_standard_request_device+0x18>
		command = usb_standard_device_get_status;
 8000fda:	4c06      	ldr	r4, [pc, #24]	; (8000ff4 <_usbd_standard_request_device+0x40>)
		break;
 8000fdc:	e7f6      	b.n	8000fcc <_usbd_standard_request_device+0x18>
		command = usb_standard_set_address;
 8000fde:	4c06      	ldr	r4, [pc, #24]	; (8000ff8 <_usbd_standard_request_device+0x44>)
 8000fe0:	e7f4      	b.n	8000fcc <_usbd_standard_request_device+0x18>
}
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	bc10      	pop	{r4}
 8000fe6:	4770      	bx	lr
 8000fe8:	08000b2f 	.word	0x08000b2f
 8000fec:	08000bc1 	.word	0x08000bc1
 8000ff0:	08000cc9 	.word	0x08000cc9
 8000ff4:	08000c67 	.word	0x08000c67
 8000ff8:	08000b07 	.word	0x08000b07

08000ffc <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 8000ffc:	b410      	push	{r4}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8000ffe:	784c      	ldrb	r4, [r1, #1]
 8001000:	2c0a      	cmp	r4, #10
 8001002:	d006      	beq.n	8001012 <_usbd_standard_request_interface+0x16>
 8001004:	2c0b      	cmp	r4, #11
 8001006:	d006      	beq.n	8001016 <_usbd_standard_request_interface+0x1a>
 8001008:	b93c      	cbnz	r4, 800101a <_usbd_standard_request_interface+0x1e>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 800100a:	4c05      	ldr	r4, [pc, #20]	; (8001020 <_usbd_standard_request_interface+0x24>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800100c:	46a4      	mov	ip, r4
}
 800100e:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001010:	4760      	bx	ip
		command = usb_standard_get_interface;
 8001012:	4c04      	ldr	r4, [pc, #16]	; (8001024 <_usbd_standard_request_interface+0x28>)
 8001014:	e7fa      	b.n	800100c <_usbd_standard_request_interface+0x10>
	switch (req->bRequest) {
 8001016:	4c04      	ldr	r4, [pc, #16]	; (8001028 <_usbd_standard_request_interface+0x2c>)
 8001018:	e7f8      	b.n	800100c <_usbd_standard_request_interface+0x10>
}
 800101a:	2000      	movs	r0, #0
 800101c:	bc10      	pop	{r4}
 800101e:	4770      	bx	lr
 8001020:	08000f6f 	.word	0x08000f6f
 8001024:	08000c33 	.word	0x08000c33
 8001028:	08000be3 	.word	0x08000be3

0800102c <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 800102c:	b410      	push	{r4}
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800102e:	784c      	ldrb	r4, [r1, #1]
 8001030:	2c01      	cmp	r4, #1
 8001032:	d004      	beq.n	800103e <_usbd_standard_request_endpoint+0x12>
 8001034:	2c03      	cmp	r4, #3
 8001036:	d007      	beq.n	8001048 <_usbd_standard_request_endpoint+0x1c>
 8001038:	b91c      	cbnz	r4, 8001042 <_usbd_standard_request_endpoint+0x16>
 800103a:	4c08      	ldr	r4, [pc, #32]	; (800105c <_usbd_standard_request_endpoint+0x30>)
 800103c:	e008      	b.n	8001050 <_usbd_standard_request_endpoint+0x24>
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800103e:	884c      	ldrh	r4, [r1, #2]
 8001040:	b14c      	cbz	r4, 8001056 <_usbd_standard_request_endpoint+0x2a>
	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
}
 8001042:	2000      	movs	r0, #0
 8001044:	bc10      	pop	{r4}
 8001046:	4770      	bx	lr
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001048:	884c      	ldrh	r4, [r1, #2]
 800104a:	2c00      	cmp	r4, #0
 800104c:	d1f9      	bne.n	8001042 <_usbd_standard_request_endpoint+0x16>
			command = usb_standard_endpoint_stall;
 800104e:	4c04      	ldr	r4, [pc, #16]	; (8001060 <_usbd_standard_request_endpoint+0x34>)
	return command(usbd_dev, req, buf, len);
 8001050:	46a4      	mov	ip, r4
}
 8001052:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001054:	4760      	bx	ip
			command = usb_standard_endpoint_unstall;
 8001056:	4c03      	ldr	r4, [pc, #12]	; (8001064 <_usbd_standard_request_endpoint+0x38>)
 8001058:	e7fa      	b.n	8001050 <_usbd_standard_request_endpoint+0x24>
 800105a:	bf00      	nop
 800105c:	08000c7f 	.word	0x08000c7f
 8001060:	08000ca9 	.word	0x08000ca9
 8001064:	08000cb9 	.word	0x08000cb9

08001068 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8001068:	b410      	push	{r4}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 800106a:	780c      	ldrb	r4, [r1, #0]
 800106c:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001070:	d10f      	bne.n	8001092 <_usbd_standard_request+0x2a>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001072:	f004 041f 	and.w	r4, r4, #31
 8001076:	2c01      	cmp	r4, #1
 8001078:	d005      	beq.n	8001086 <_usbd_standard_request+0x1e>
 800107a:	2c02      	cmp	r4, #2
 800107c:	d006      	beq.n	800108c <_usbd_standard_request+0x24>
 800107e:	b944      	cbnz	r4, 8001092 <_usbd_standard_request+0x2a>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001080:	bc10      	pop	{r4}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001082:	f7ff bf97 	b.w	8000fb4 <_usbd_standard_request_device>
}
 8001086:	bc10      	pop	{r4}
		return _usbd_standard_request_interface(usbd_dev, req,
 8001088:	f7ff bfb8 	b.w	8000ffc <_usbd_standard_request_interface>
}
 800108c:	bc10      	pop	{r4}
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 800108e:	f7ff bfcd 	b.w	800102c <_usbd_standard_request_endpoint>
}
 8001092:	2000      	movs	r0, #0
 8001094:	bc10      	pop	{r4}
 8001096:	4770      	bx	lr

08001098 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8001098:	b508      	push	{r3, lr}
	rcc_periph_clock_enable(RCC_USB);
 800109a:	f240 3097 	movw	r0, #919	; 0x397
 800109e:	f7ff fb4f 	bl	8000740 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <st_usbfs_v1_usbd_init+0x28>)

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <st_usbfs_v1_usbd_init+0x2c>)
	SET_REG(USB_CNTR_REG, 0);
 80010a8:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
	SET_REG(USB_BTABLE_REG, 0);
 80010ac:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
	SET_REG(USB_ISTR_REG, 0);
 80010b0:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 80010b4:	f44f 421c 	mov.w	r2, #39936	; 0x9c00
 80010b8:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40
}
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	40005000 	.word	0x40005000
 80010c4:	200000a0 	.word	0x200000a0

080010c8 <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 80010c8:	3201      	adds	r2, #1
 80010ca:	1052      	asrs	r2, r2, #1
 80010cc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80010d0:	4291      	cmp	r1, r2
 80010d2:	d100      	bne.n	80010d6 <st_usbfs_copy_to_pm+0xe>
		*PM++ = *lbuf++;
	}
}
 80010d4:	4770      	bx	lr
		*PM++ = *lbuf++;
 80010d6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80010da:	f840 3b04 	str.w	r3, [r0], #4
	for (len = (len + 1) >> 1; len; len--) {
 80010de:	e7f7      	b.n	80010d0 <st_usbfs_copy_to_pm+0x8>

080010e0 <st_usbfs_copy_from_pm>:
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
	uint16_t *lbuf = buf;
 80010e0:	4603      	mov	r3, r0
{
 80010e2:	b570      	push	{r4, r5, r6, lr}
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 80010e4:	f002 0401 	and.w	r4, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 80010e8:	0852      	lsrs	r2, r2, #1
 80010ea:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80010ee:	42a9      	cmp	r1, r5
 80010f0:	d104      	bne.n	80010fc <st_usbfs_copy_from_pm+0x1c>
		*lbuf = *PM;
	}

	if (odd) {
 80010f2:	b114      	cbz	r4, 80010fa <st_usbfs_copy_from_pm+0x1a>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 80010f4:	780b      	ldrb	r3, [r1, #0]
 80010f6:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
	}
}
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
		*lbuf = *PM;
 80010fc:	f831 6b04 	ldrh.w	r6, [r1], #4
 8001100:	f823 6b02 	strh.w	r6, [r3], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8001104:	e7f3      	b.n	80010ee <st_usbfs_copy_from_pm+0xe>

08001106 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8001106:	e7fe      	b.n	8001106 <blocking_handler>

08001108 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8001108:	4770      	bx	lr
	...

0800110c <reset_handler>:
{
 800110c:	b538      	push	{r3, r4, r5, lr}
	for (src = &_data_loadaddr, dest = &_data;
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <reset_handler+0x6c>)
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <reset_handler+0x70>)
 8001112:	491b      	ldr	r1, [pc, #108]	; (8001180 <reset_handler+0x74>)
 8001114:	428b      	cmp	r3, r1
 8001116:	d31a      	bcc.n	800114e <reset_handler+0x42>
		*dest++ = 0;
 8001118:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 800111a:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <reset_handler+0x78>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d31b      	bcc.n	8001158 <reset_handler+0x4c>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001120:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001124:	f8d2 3d14 	ldr.w	r3, [r2, #3348]	; 0xd14
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001128:	4c17      	ldr	r4, [pc, #92]	; (8001188 <reset_handler+0x7c>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800112e:	4d17      	ldr	r5, [pc, #92]	; (800118c <reset_handler+0x80>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001130:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001134:	42ac      	cmp	r4, r5
 8001136:	d312      	bcc.n	800115e <reset_handler+0x52>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001138:	4c15      	ldr	r4, [pc, #84]	; (8001190 <reset_handler+0x84>)
 800113a:	4d16      	ldr	r5, [pc, #88]	; (8001194 <reset_handler+0x88>)
 800113c:	42ac      	cmp	r4, r5
 800113e:	d312      	bcc.n	8001166 <reset_handler+0x5a>
	(void)main();
 8001140:	f7ff f806 	bl	8000150 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001144:	4c14      	ldr	r4, [pc, #80]	; (8001198 <reset_handler+0x8c>)
 8001146:	4d15      	ldr	r5, [pc, #84]	; (800119c <reset_handler+0x90>)
 8001148:	42ac      	cmp	r4, r5
 800114a:	d310      	bcc.n	800116e <reset_handler+0x62>
}
 800114c:	bd38      	pop	{r3, r4, r5, pc}
		*dest = *src;
 800114e:	f852 0b04 	ldr.w	r0, [r2], #4
 8001152:	f843 0b04 	str.w	r0, [r3], #4
		src++, dest++) {
 8001156:	e7dd      	b.n	8001114 <reset_handler+0x8>
		*dest++ = 0;
 8001158:	f843 1b04 	str.w	r1, [r3], #4
 800115c:	e7de      	b.n	800111c <reset_handler+0x10>
		(*fp)();
 800115e:	f854 3b04 	ldr.w	r3, [r4], #4
 8001162:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001164:	e7e6      	b.n	8001134 <reset_handler+0x28>
		(*fp)();
 8001166:	f854 3b04 	ldr.w	r3, [r4], #4
 800116a:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800116c:	e7e6      	b.n	800113c <reset_handler+0x30>
		(*fp)();
 800116e:	f854 3b04 	ldr.w	r3, [r4], #4
 8001172:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001174:	e7e8      	b.n	8001148 <reset_handler+0x3c>
 8001176:	bf00      	nop
 8001178:	08001944 	.word	0x08001944
 800117c:	20000000 	.word	0x20000000
 8001180:	20000018 	.word	0x20000018
 8001184:	200001ac 	.word	0x200001ac
 8001188:	08001944 	.word	0x08001944
 800118c:	08001944 	.word	0x08001944
 8001190:	08001944 	.word	0x08001944
 8001194:	08001944 	.word	0x08001944
 8001198:	08001944 	.word	0x08001944
 800119c:	08001944 	.word	0x08001944

080011a0 <systick_set_reload>:
 *
 * @param[in] value uint32_t. 24 bit reload value.
 */
void systick_set_reload(uint32_t value)
{
	STK_RVR = (value & STK_RVR_RELOAD);
 80011a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80011a8:	6158      	str	r0, [r3, #20]
}
 80011aa:	4770      	bx	lr

080011ac <systick_set_clocksource>:
 * @param[in] clocksource uint8_t. Clock source from @ref systick_clksource.
 */

void systick_set_clocksource(uint8_t clocksource)
{
	STK_CSR = (STK_CSR & ~STK_CSR_CLKSOURCE) |
 80011ac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011b0:	6913      	ldr	r3, [r2, #16]
		  (clocksource & STK_CSR_CLKSOURCE);
 80011b2:	f000 0004 	and.w	r0, r0, #4
	STK_CSR = (STK_CSR & ~STK_CSR_CLKSOURCE) |
 80011b6:	f023 0304 	bic.w	r3, r3, #4
 80011ba:	4303      	orrs	r3, r0
 80011bc:	6113      	str	r3, [r2, #16]
}
 80011be:	4770      	bx	lr

080011c0 <systick_interrupt_enable>:
 *
 */

void systick_interrupt_enable(void)
{
	STK_CSR |= STK_CSR_TICKINT;
 80011c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011c4:	6913      	ldr	r3, [r2, #16]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6113      	str	r3, [r2, #16]
}
 80011cc:	4770      	bx	lr

080011ce <systick_counter_enable>:
 *
 */

void systick_counter_enable(void)
{
	STK_CSR |= STK_CSR_ENABLE;
 80011ce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80011d2:	6913      	ldr	r3, [r2, #16]
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6113      	str	r3, [r2, #16]
}
 80011da:	4770      	bx	lr

080011dc <scb_reset_core>:

/* Those are defined only on CM3 or CM4 */
#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
void scb_reset_core(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_VECTRESET;
 80011dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011e0:	4a01      	ldr	r2, [pc, #4]	; (80011e8 <scb_reset_core+0xc>)
 80011e2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	while (1);
 80011e6:	e7fe      	b.n	80011e6 <scb_reset_core+0xa>
 80011e8:	05fa0001 	.word	0x05fa0001

080011ec <nvic_set_priority>:
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 80011ec:	2843      	cmp	r0, #67	; 0x43
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
				((uint32_t) priority) << shift);
#else
		NVIC_IPR(irqn) = priority;
 80011ee:	bf93      	iteet	ls
 80011f0:	f100 4060 	addls.w	r0, r0, #3758096384	; 0xe0000000
		SCB_SHPR((irqn & 0xF) - 4) = priority;
 80011f4:	4b04      	ldrhi	r3, [pc, #16]	; (8001208 <nvic_set_priority+0x1c>)
 80011f6:	f000 000f 	andhi.w	r0, r0, #15
		NVIC_IPR(irqn) = priority;
 80011fa:	f500 4064 	addls.w	r0, r0, #58368	; 0xe400
		SCB_SHPR((irqn & 0xF) - 4) = priority;
 80011fe:	bf8c      	ite	hi
 8001200:	54c1      	strbhi	r1, [r0, r3]
		NVIC_IPR(irqn) = priority;
 8001202:	7001      	strbls	r1, [r0, #0]
#endif
	}
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed14 	.word	0xe000ed14

0800120c <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <flash_set_ws+0x10>)
 800120e:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8001210:	f023 0307 	bic.w	r3, r3, #7
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8001214:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <st_usbfs_set_address+0xc>)
 8001222:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001226:	f8c3 1c4c 	str.w	r1, [r3, #3148]	; 0xc4c
}
 800122a:	4770      	bx	lr
 800122c:	40005000 	.word	0x40005000

08001230 <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 8001230:	2a3e      	cmp	r2, #62	; 0x3e
 8001232:	d914      	bls.n	800125e <st_usbfs_set_ep_rx_bufsize+0x2e>
		/* Round up, div by 32 and sub 1 == (size + 31)/32 - 1 == (size-1)/32)*/
		size = ((size - 1) >> 5) & 0x1F;
 8001234:	3a01      	subs	r2, #1
 8001236:	f3c2 1344 	ubfx	r3, r2, #5, #5
		realsize = (size + 1) << 5;
 800123a:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
 800123e:	f102 0020 	add.w	r0, r2, #32
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
 8001242:	f043 0320 	orr.w	r3, r3, #32
		/* round up and div by 2 */
		size = (size + 1) >> 1;
		realsize = size << 1;
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <st_usbfs_set_ep_rx_bufsize+0x3c>)
 8001248:	029b      	lsls	r3, r3, #10
 800124a:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
 800124e:	b29b      	uxth	r3, r3
 8001250:	b292      	uxth	r2, r2
 8001252:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8001256:	4a06      	ldr	r2, [pc, #24]	; (8001270 <st_usbfs_set_ep_rx_bufsize+0x40>)
 8001258:	0049      	lsls	r1, r1, #1
 800125a:	5053      	str	r3, [r2, r1]
	return realsize;
}
 800125c:	4770      	bx	lr
		size = (size + 1) >> 1;
 800125e:	3201      	adds	r2, #1
 8001260:	0853      	lsrs	r3, r2, #1
		realsize = size << 1;
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	b290      	uxth	r0, r2
 8001268:	e7ed      	b.n	8001246 <st_usbfs_set_ep_rx_bufsize+0x16>
 800126a:	bf00      	nop
 800126c:	40005000 	.word	0x40005000
 8001270:	4000600c 	.word	0x4000600c

08001274 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 8001274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001278:	4606      	mov	r6, r0
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 800127a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127e:	f8ad 0000 	strh.w	r0, [sp]
 8001282:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001286:	f8ad 0002 	strh.w	r0, [sp, #2]
 800128a:	2000      	movs	r0, #0
 800128c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001290:	f44f 60c0 	mov.w	r0, #1536	; 0x600
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8001294:	f001 087f 	and.w	r8, r1, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001298:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800129c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80012a0:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
	const uint16_t typelookup[] = {
 80012a4:	f8ad 0006 	strh.w	r0, [sp, #6]
	USB_SET_EP_ADDR(addr, addr);
 80012a8:	6820      	ldr	r0, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80012aa:	ad02      	add	r5, sp, #8
	USB_SET_EP_ADDR(addr, addr);
 80012ac:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 80012b0:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80012b4:	ea40 0008 	orr.w	r0, r0, r8
 80012b8:	b280      	uxth	r0, r0
 80012ba:	6020      	str	r0, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80012bc:	6820      	ldr	r0, [r4, #0]
 80012be:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80012c2:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80012c6:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 80012ca:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80012ce:	4310      	orrs	r0, r2
 80012d0:	b249      	sxtb	r1, r1
 80012d2:	b280      	uxth	r0, r0

	if (dir || (addr == 0)) {
 80012d4:	2900      	cmp	r1, #0
{
 80012d6:	9f08      	ldr	r7, [sp, #32]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80012d8:	6020      	str	r0, [r4, #0]
	if (dir || (addr == 0)) {
 80012da:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80012de:	db2d      	blt.n	800133c <st_usbfs_ep_setup+0xc8>
 80012e0:	f1b8 0f00 	cmp.w	r8, #0
 80012e4:	d02a      	beq.n	800133c <st_usbfs_ep_setup+0xc8>
		dev->pm_top += max_size;
	}

	if (!dir) {
		uint16_t realsize;
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 80012e6:	4a2f      	ldr	r2, [pc, #188]	; (80013a4 <st_usbfs_ep_setup+0x130>)
 80012e8:	8b31      	ldrh	r1, [r6, #24]
 80012ea:	f8d2 2c50 	ldr.w	r2, [r2, #3152]	; 0xc50
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 80012ee:	4630      	mov	r0, r6
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 80012f0:	b292      	uxth	r2, r2
 80012f2:	4494      	add	ip, r2
 80012f4:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <st_usbfs_ep_setup+0x134>)
 80012f6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80012fa:	f842 100c 	str.w	r1, [r2, ip]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 80012fe:	461a      	mov	r2, r3
 8001300:	4641      	mov	r1, r8
 8001302:	f7ff ff95 	bl	8001230 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8001306:	2f00      	cmp	r7, #0
 8001308:	d145      	bne.n	8001396 <st_usbfs_ep_setup+0x122>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 8001310:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001314:	041b      	lsls	r3, r3, #16
 8001316:	0c1b      	lsrs	r3, r3, #16
 8001318:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001324:	b29b      	uxth	r3, r3
 8001326:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800132a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001332:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8001334:	8b33      	ldrh	r3, [r6, #24]
 8001336:	4418      	add	r0, r3
 8001338:	8330      	strh	r0, [r6, #24]
	}
}
 800133a:	e029      	b.n	8001390 <st_usbfs_ep_setup+0x11c>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 800133c:	4819      	ldr	r0, [pc, #100]	; (80013a4 <st_usbfs_ep_setup+0x130>)
 800133e:	8b32      	ldrh	r2, [r6, #24]
 8001340:	f8d0 0c50 	ldr.w	r0, [r0, #3152]	; 0xc50
 8001344:	b280      	uxth	r0, r0
 8001346:	4460      	add	r0, ip
 8001348:	0040      	lsls	r0, r0, #1
 800134a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800134e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 8001352:	6002      	str	r2, [r0, #0]
		if (callback) {
 8001354:	b11f      	cbz	r7, 800135e <st_usbfs_ep_setup+0xea>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001356:	200c      	movs	r0, #12
 8001358:	fb00 6008 	mla	r0, r0, r8, r6
 800135c:	6687      	str	r7, [r0, #104]	; 0x68
		USB_CLR_EP_TX_DTOG(addr);
 800135e:	6820      	ldr	r0, [r4, #0]
		dev->pm_top += max_size;
 8001360:	441a      	add	r2, r3
		USB_CLR_EP_TX_DTOG(addr);
 8001362:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8001366:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 800136a:	0400      	lsls	r0, r0, #16
 800136c:	0c00      	lsrs	r0, r0, #16
 800136e:	6020      	str	r0, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001370:	6825      	ldr	r5, [r4, #0]
	if (!dir) {
 8001372:	2900      	cmp	r1, #0
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001374:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 8001378:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800137c:	b2ad      	uxth	r5, r5
 800137e:	f085 0520 	eor.w	r5, r5, #32
 8001382:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8001386:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800138a:	6025      	str	r5, [r4, #0]
		dev->pm_top += max_size;
 800138c:	8332      	strh	r2, [r6, #24]
	if (!dir) {
 800138e:	daaa      	bge.n	80012e6 <st_usbfs_ep_setup+0x72>
}
 8001390:	b002      	add	sp, #8
 8001392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001396:	210c      	movs	r1, #12
 8001398:	fb01 6808 	mla	r8, r1, r8, r6
 800139c:	f8c8 706c 	str.w	r7, [r8, #108]	; 0x6c
 80013a0:	e7b3      	b.n	800130a <st_usbfs_ep_setup+0x96>
 80013a2:	bf00      	nop
 80013a4:	40005000 	.word	0x40005000
 80013a8:	40006008 	.word	0x40006008

080013ac <st_usbfs_endpoints_reset>:
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80013ac:	f248 0180 	movw	r1, #32896	; 0x8080
{
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <st_usbfs_endpoints_reset+0x34>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80013b4:	4e0b      	ldr	r6, [pc, #44]	; (80013e4 <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80013b6:	4d0c      	ldr	r5, [pc, #48]	; (80013e8 <st_usbfs_endpoints_reset+0x3c>)
	for (i = 1; i < 8; i++) {
 80013b8:	4c0c      	ldr	r4, [pc, #48]	; (80013ec <st_usbfs_endpoints_reset+0x40>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80013ba:	6813      	ldr	r3, [r2, #0]
 80013bc:	4033      	ands	r3, r6
 80013be:	430b      	orrs	r3, r1
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	402b      	ands	r3, r5
 80013c8:	430b      	orrs	r3, r1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 1; i < 8; i++) {
 80013d0:	42a2      	cmp	r2, r4
 80013d2:	d1f2      	bne.n	80013ba <st_usbfs_endpoints_reset+0xe>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 80013d4:	6803      	ldr	r3, [r0, #0]
 80013d6:	79db      	ldrb	r3, [r3, #7]
 80013d8:	3320      	adds	r3, #32
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	8303      	strh	r3, [r0, #24]
}
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	40005c04 	.word	0x40005c04
 80013e4:	ffff8fbf 	.word	0xffff8fbf
 80013e8:	ffffbf8f 	.word	0xffffbf8f
 80013ec:	40005c20 	.word	0x40005c20

080013f0 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 80013f0:	b510      	push	{r4, lr}
	(void)dev;
	if (addr == 0) {
 80013f2:	2900      	cmp	r1, #0
 80013f4:	d135      	bne.n	8001462 <st_usbfs_ep_stall_set+0x72>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2410      	movne	r4, #16
 80013fc:	2420      	moveq	r4, #32
 80013fe:	482c      	ldr	r0, [pc, #176]	; (80014b0 <st_usbfs_ep_stall_set+0xc0>)
 8001400:	f8d0 3c00 	ldr.w	r3, [r0, #3072]	; 0xc00
 8001404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800140c:	4063      	eors	r3, r4
 800140e:	b21b      	sxth	r3, r3
 8001410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001418:	b29b      	uxth	r3, r3
 800141a:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_RX_DTOG(addr);
 800141e:	0089      	lsls	r1, r1, #2
 8001420:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001424:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
		if (!stall) {
 8001428:	b93a      	cbnz	r2, 800143a <st_usbfs_ep_stall_set+0x4a>
			USB_CLR_EP_RX_DTOG(addr);
 800142a:	680b      	ldr	r3, [r1, #0]
 800142c:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 8001430:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	0c1b      	lsrs	r3, r3, #16
 8001438:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 800143a:	2a00      	cmp	r2, #0
 800143c:	bf14      	ite	ne
 800143e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8001442:	f44f 5240 	moveq.w	r2, #12288	; 0x3000
 8001446:	680b      	ldr	r3, [r1, #0]
 8001448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800144c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001450:	4053      	eors	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	b29b      	uxth	r3, r3
 800145e:	600b      	str	r3, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 8001460:	e024      	b.n	80014ac <st_usbfs_ep_stall_set+0xbc>
	if (addr & 0x80) {
 8001462:	060b      	lsls	r3, r1, #24
 8001464:	d5db      	bpl.n	800141e <st_usbfs_ep_stall_set+0x2e>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001466:	2a00      	cmp	r2, #0
 8001468:	bf14      	ite	ne
 800146a:	2210      	movne	r2, #16
 800146c:	2220      	moveq	r2, #32
 800146e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8001472:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800147a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001484:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001488:	ea82 0201 	eor.w	r2, r2, r1
 800148c:	b212      	sxth	r2, r2
 800148e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001492:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001496:	b292      	uxth	r2, r2
 8001498:	601a      	str	r2, [r3, #0]
		if (!stall) {
 800149a:	d107      	bne.n	80014ac <st_usbfs_ep_stall_set+0xbc>
			USB_CLR_EP_TX_DTOG(addr);
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80014a2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80014a6:	0412      	lsls	r2, r2, #16
 80014a8:	0c12      	lsrs	r2, r2, #16
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bd10      	pop	{r4, pc}
 80014ae:	bf00      	nop
 80014b0:	40005000 	.word	0x40005000

080014b4 <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 80014b4:	060b      	lsls	r3, r1, #24
 80014b6:	d50e      	bpl.n	80014d6 <st_usbfs_ep_stall_get+0x22>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 80014b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80014bc:	0089      	lsls	r1, r1, #2
 80014be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80014c2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80014c6:	6808      	ldr	r0, [r1, #0]
 80014c8:	f000 0030 	and.w	r0, r0, #48	; 0x30
		    USB_EP_TX_STAT_STALL) {
			return 1;
 80014cc:	2810      	cmp	r0, #16
 80014ce:	bf14      	ite	ne
 80014d0:	2000      	movne	r0, #0
 80014d2:	2001      	moveq	r0, #1
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 80014d4:	4770      	bx	lr
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80014d6:	0089      	lsls	r1, r1, #2
 80014d8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80014dc:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80014e0:	6808      	ldr	r0, [r1, #0]
 80014e2:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
			return 1;
 80014e6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80014ea:	e7f0      	b.n	80014ce <st_usbfs_ep_stall_get+0x1a>

080014ec <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80014ec:	060b      	lsls	r3, r1, #24
 80014ee:	d412      	bmi.n	8001516 <st_usbfs_ep_nak_set+0x2a>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <st_usbfs_ep_nak_set+0x34>)
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <st_usbfs_ep_nak_set+0x38>)
 80014f4:	545a      	strb	r2, [r3, r1]

	if (nak) {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 80014f6:	0089      	lsls	r1, r1, #2
 80014f8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80014fc:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	4003      	ands	r3, r0
 8001504:	b29b      	uxth	r3, r3
	if (nak) {
 8001506:	b13a      	cbz	r2, 8001518 <st_usbfs_ep_nak_set+0x2c>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001508:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800150c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	600b      	str	r3, [r1, #0]
	}
}
 8001516:	4770      	bx	lr
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001518:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800151c:	e7f6      	b.n	800150c <st_usbfs_ep_nak_set+0x20>
 800151e:	bf00      	nop
 8001520:	200001a4 	.word	0x200001a4
 8001524:	ffffbf8f 	.word	0xffffbf8f

08001528 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8001528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800152c:	460c      	mov	r4, r1
 800152e:	461e      	mov	r6, r3
	(void)dev;
	addr &= 0x7F;
 8001530:	f004 037f 	and.w	r3, r4, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001534:	009d      	lsls	r5, r3, #2
 8001536:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800153a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
{
 800153e:	4611      	mov	r1, r2
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001540:	682a      	ldr	r2, [r5, #0]
 8001542:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001546:	2a30      	cmp	r2, #48	; 0x30
 8001548:	d02c      	beq.n	80015a4 <st_usbfs_ep_write_packet+0x7c>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 800154a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80015a8 <st_usbfs_ep_write_packet+0x80>
 800154e:	4632      	mov	r2, r6
 8001550:	f8d8 4c50 	ldr.w	r4, [r8, #3152]	; 0xc50
 8001554:	00df      	lsls	r7, r3, #3
 8001556:	b2a4      	uxth	r4, r4
 8001558:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800155c:	0064      	lsls	r4, r4, #1
 800155e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001562:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
 8001566:	8820      	ldrh	r0, [r4, #0]
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800156e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 8001572:	f7ff fda9 	bl	80010c8 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 8001576:	f8d8 3c50 	ldr.w	r3, [r8, #3152]	; 0xc50
 800157a:	b29b      	uxth	r3, r3
 800157c:	441f      	add	r7, r3
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <st_usbfs_ep_write_packet+0x84>)
 8001580:	007f      	lsls	r7, r7, #1
 8001582:	51de      	str	r6, [r3, r7]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001584:	6829      	ldr	r1, [r5, #0]
 8001586:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800158a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800158e:	b289      	uxth	r1, r1
 8001590:	f081 0130 	eor.w	r1, r1, #48	; 0x30
 8001594:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001598:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800159c:	6029      	str	r1, [r5, #0]

	return len;
}
 800159e:	4630      	mov	r0, r6
 80015a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 80015a4:	2600      	movs	r6, #0
 80015a6:	e7fa      	b.n	800159e <st_usbfs_ep_write_packet+0x76>
 80015a8:	40005000 	.word	0x40005000
 80015ac:	40006004 	.word	0x40006004

080015b0 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80015b2:	008d      	lsls	r5, r1, #2
 80015b4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80015b8:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
{
 80015bc:	461c      	mov	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80015be:	682b      	ldr	r3, [r5, #0]
{
 80015c0:	460e      	mov	r6, r1
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80015c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80015c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
{
 80015ca:	4610      	mov	r0, r2
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80015cc:	d03f      	beq.n	800164e <st_usbfs_ep_read_packet+0x9e>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80015ce:	4f21      	ldr	r7, [pc, #132]	; (8001654 <st_usbfs_ep_read_packet+0xa4>)
 80015d0:	00ca      	lsls	r2, r1, #3
 80015d2:	f8d7 3c50 	ldr.w	r3, [r7, #3152]	; 0xc50
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80015dc:	491e      	ldr	r1, [pc, #120]	; (8001658 <st_usbfs_ep_read_packet+0xa8>)
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	58cb      	ldr	r3, [r1, r3]
 80015e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	da07      	bge.n	80015fa <st_usbfs_ep_read_packet+0x4a>
 80015ea:	f8d7 3c50 	ldr.w	r3, [r7, #3152]	; 0xc50
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	58cc      	ldr	r4, [r1, r3]
 80015f6:	f3c4 0409 	ubfx	r4, r4, #0, #10
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <st_usbfs_ep_read_packet+0xa4>)
 80015fc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8001600:	b29b      	uxth	r3, r3
 8001602:	441a      	add	r2, r3
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <st_usbfs_ep_read_packet+0xac>)
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	5a99      	ldrh	r1, [r3, r2]
 800160a:	4622      	mov	r2, r4
 800160c:	0049      	lsls	r1, r1, #1
 800160e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001612:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001616:	f7ff fd63 	bl	80010e0 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 800161a:	682b      	ldr	r3, [r5, #0]
 800161c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001620:	051b      	lsls	r3, r3, #20
 8001622:	0d1b      	lsrs	r3, r3, #20
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	602b      	str	r3, [r5, #0]

	if (!st_usbfs_force_nak[addr]) {
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <st_usbfs_ep_read_packet+0xb0>)
 800162c:	5d9b      	ldrb	r3, [r3, r6]
 800162e:	b963      	cbnz	r3, 800164a <st_usbfs_ep_read_packet+0x9a>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001630:	6829      	ldr	r1, [r5, #0]
 8001632:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001636:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800163a:	b289      	uxth	r1, r1
 800163c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8001640:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001644:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001648:	6029      	str	r1, [r5, #0]
	}

	return len;
}
 800164a:	4620      	mov	r0, r4
 800164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800164e:	2400      	movs	r4, #0
 8001650:	e7fb      	b.n	800164a <st_usbfs_ep_read_packet+0x9a>
 8001652:	bf00      	nop
 8001654:	40005000 	.word	0x40005000
 8001658:	4000600c 	.word	0x4000600c
 800165c:	40006008 	.word	0x40006008
 8001660:	200001a4 	.word	0x200001a4

08001664 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;
 8001664:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <st_usbfs_poll+0xf0>)
{
 8001666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8001668:	f8d2 3c44 	ldr.w	r3, [r2, #3140]	; 0xc44
{
 800166c:	4604      	mov	r4, r0

	if (istr & USB_ISTR_RESET) {
 800166e:	055f      	lsls	r7, r3, #21
 8001670:	b29e      	uxth	r6, r3
 8001672:	d509      	bpl.n	8001688 <st_usbfs_poll+0x24>
		USB_CLR_ISTR_RESET();
 8001674:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001678:	f8c2 3c44 	str.w	r3, [r2, #3140]	; 0xc44
		dev->pm_top = USBD_PM_TOP;
 800167c:	2340      	movs	r3, #64	; 0x40
 800167e:	8303      	strh	r3, [r0, #24]
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8001680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_usbd_reset(dev);
 8001684:	f7ff b89f 	b.w	80007c6 <_usbd_reset>
	if (istr & USB_ISTR_CTR) {
 8001688:	041d      	lsls	r5, r3, #16
 800168a:	d51e      	bpl.n	80016ca <st_usbfs_poll+0x66>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 800168c:	f003 070f 	and.w	r7, r3, #15
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8001690:	00bd      	lsls	r5, r7, #2
 8001692:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		if (istr & USB_ISTR_DIR) {
 8001696:	f013 0310 	ands.w	r3, r3, #16
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800169a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
		if (istr & USB_ISTR_DIR) {
 800169e:	d03d      	beq.n	800171c <st_usbfs_poll+0xb8>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	0519      	lsls	r1, r3, #20
 80016a4:	d543      	bpl.n	800172e <st_usbfs_poll+0xca>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 80016a6:	2308      	movs	r3, #8
 80016a8:	4639      	mov	r1, r7
 80016aa:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80016ae:	f7ff ff7f 	bl	80015b0 <st_usbfs_ep_read_packet>
				type = USB_TRANSACTION_SETUP;
 80016b2:	2302      	movs	r3, #2
		if (dev->user_callback_ctr[ep][type]) {
 80016b4:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80016b8:	4413      	add	r3, r2
 80016ba:	331a      	adds	r3, #26
 80016bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d036      	beq.n	8001732 <st_usbfs_poll+0xce>
			dev->user_callback_ctr[ep][type] (dev, ep);
 80016c4:	4639      	mov	r1, r7
 80016c6:	4620      	mov	r0, r4
 80016c8:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 80016ca:	0532      	lsls	r2, r6, #20
 80016cc:	d507      	bpl.n	80016de <st_usbfs_poll+0x7a>
		USB_CLR_ISTR_SUSP();
 80016ce:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <st_usbfs_poll+0xf0>)
 80016d4:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
		if (dev->user_callback_suspend) {
 80016d8:	6a23      	ldr	r3, [r4, #32]
 80016da:	b103      	cbz	r3, 80016de <st_usbfs_poll+0x7a>
			dev->user_callback_suspend();
 80016dc:	4798      	blx	r3
	if (istr & USB_ISTR_WKUP) {
 80016de:	04f3      	lsls	r3, r6, #19
 80016e0:	d507      	bpl.n	80016f2 <st_usbfs_poll+0x8e>
		USB_CLR_ISTR_WKUP();
 80016e2:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <st_usbfs_poll+0xf0>)
 80016e8:	f8c3 2c44 	str.w	r2, [r3, #3140]	; 0xc44
		if (dev->user_callback_resume) {
 80016ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ee:	b103      	cbz	r3, 80016f2 <st_usbfs_poll+0x8e>
			dev->user_callback_resume();
 80016f0:	4798      	blx	r3
	if (istr & USB_ISTR_SOF) {
 80016f2:	f416 7f00 	tst.w	r6, #512	; 0x200
 80016f6:	4d17      	ldr	r5, [pc, #92]	; (8001754 <st_usbfs_poll+0xf0>)
 80016f8:	d006      	beq.n	8001708 <st_usbfs_poll+0xa4>
		USB_CLR_ISTR_SOF();
 80016fa:	f64f 52ff 	movw	r2, #65023	; 0xfdff
		if (dev->user_callback_sof) {
 80016fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		USB_CLR_ISTR_SOF();
 8001700:	f8c5 2c44 	str.w	r2, [r5, #3140]	; 0xc44
		if (dev->user_callback_sof) {
 8001704:	b1f3      	cbz	r3, 8001744 <st_usbfs_poll+0xe0>
			dev->user_callback_sof();
 8001706:	4798      	blx	r3
	if (dev->user_callback_sof) {
 8001708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800170a:	b1db      	cbz	r3, 8001744 <st_usbfs_poll+0xe0>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <st_usbfs_poll+0xf0>)
 800170e:	f8d2 3c40 	ldr.w	r3, [r2, #3136]	; 0xc40
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	f8c2 3c40 	str.w	r3, [r2, #3136]	; 0xc40
}
 800171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			USB_CLR_EP_TX_CTR(ep);
 800171c:	682a      	ldr	r2, [r5, #0]
 800171e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001722:	0512      	lsls	r2, r2, #20
 8001724:	0d12      	lsrs	r2, r2, #20
 8001726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172a:	602a      	str	r2, [r5, #0]
 800172c:	e7c2      	b.n	80016b4 <st_usbfs_poll+0x50>
				type = USB_TRANSACTION_OUT;
 800172e:	2301      	movs	r3, #1
 8001730:	e7c0      	b.n	80016b4 <st_usbfs_poll+0x50>
			USB_CLR_EP_RX_CTR(ep);
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001738:	051b      	lsls	r3, r3, #20
 800173a:	0d1b      	lsrs	r3, r3, #20
 800173c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001740:	602b      	str	r3, [r5, #0]
 8001742:	e7c2      	b.n	80016ca <st_usbfs_poll+0x66>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001744:	f8d5 3c40 	ldr.w	r3, [r5, #3136]	; 0xc40
 8001748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800174c:	f8c5 3c40 	str.w	r3, [r5, #3136]	; 0xc40
 8001750:	e7e3      	b.n	800171a <st_usbfs_poll+0xb6>
 8001752:	bf00      	nop
 8001754:	40005000 	.word	0x40005000

08001758 <strlen>:
 8001758:	4603      	mov	r3, r0
 800175a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800175e:	2a00      	cmp	r2, #0
 8001760:	d1fb      	bne.n	800175a <strlen+0x2>
 8001762:	1a18      	subs	r0, r3, r0
 8001764:	3801      	subs	r0, #1
 8001766:	4770      	bx	lr

08001768 <dev_descr>:
 8001768:	0112 0200 0000 4000 1209 0001 0200 0201     .......@........
 8001778:	0103 0000                                   ....

0800177c <hid_report_descriptor>:
 800177c:	0105 0409 01a1 3209 0016 2680 7fff 1075     .......2...&..u.
 800178c:	0195 0291 4009 0016 2680 7fff 1075 0195     .....@...&..u...
 800179c:	0291 4109 0291 4209 0291 3409 0015 ff25     ...A...B...4..%.
 80017ac:	0875 0195 0281 3509 0015 0125 0175 0195     u......5..%.u...
 80017bc:	0281 3609 0016 2600 7fff 1075 0195 0281     ...6...&..u.....
 80017cc:	00c0 0000                                   ....

080017d0 <hid_function>:
 80017d0:	2109 0100 0100 5122 0000 0000               .!...."Q....

080017dc <hid_endpoint>:
 80017dc:	0507 0381 0004 0020 0000 0000 0000 0000     ...... .........

080017ec <hid_iface>:
 80017ec:	0409 0000 0301 0201 dc00 0017 d008 0017     ................
 80017fc:	0908 0000 0000 0000                         ........

08001804 <dfu_function>:
 8001804:	2109 ff09 0000 1a04 0001 0000               .!..........

08001810 <dfu_iface>:
 8001810:	0409 0001 fe00 0101 0000 0000 0400 0018     ................
 8001820:	0908 0000 0000 0000                         ........

08001828 <ifaces>:
 8001828:	0000 0000 0001 0000 0000 0000 17ec 0800     ................
 8001838:	0000 0000 0001 0000 0000 0000 1810 0800     ................

08001848 <config>:
 8001848:	0209 0000 0102 c000 2832 0018 0008 0000     ........2(......
 8001858:	4953 504d 5449 0000 4953 504d 5449 4820     SIMPIT..SIMPIT H
 8001868:	4449 4920 746e 7265 6166 6563 0000 0000     ID Interface....
 8001878:	744f 7275 6167 a7c3 0000 0000               Oturga......

08001884 <rcc_hse_configs>:
 8001884:	0104 0400 0200 0002 0000 0000 0000 0000     ................
 8001894:	a200 044a 5100 0225 a200 044a 0107 0400     ..J..Q%...J.....
 80018a4:	0200 0102 0000 0000 0000 0000 a200 044a     ..............J.
 80018b4:	5100 0225 a200 044a 0107 0400 0200 0402     .Q%...J.........
 80018c4:	0401 0006 0000 0000 a200 044a 5100 0225     ..........J..Q%.
 80018d4:	a200 044a 0101 0000 0000 0000 0000 0000     ..J.............
 80018e4:	0000 0000 3600 016e 3600 016e 3600 016e     .....6n..6n..6n.
 80018f4:	0107 0400 0300 0002 0000 0000 0000 0000     ................
 8001904:	a200 044a 5100 0225 a200 044a               ..J..Q%...J.

08001910 <st_usbfs_v1_usb_driver>:
 8001910:	1099 0800 1221 0800 1275 0800 13ad 0800     ....!...u.......
 8001920:	13f1 0800 14ed 0800 14b5 0800 1529 0800     ............)...
 8001930:	15b1 0800 1665 0800 0000 0000 0000 0000     ....e...........
 8001940:	0000 0000                                   ....
